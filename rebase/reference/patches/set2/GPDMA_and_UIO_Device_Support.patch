From 67a0819fb958c30f09f1364159b73ed17860e676 Mon Sep 17 00:00:00 2001
From: Auto Configured <auto.configured>
Date: Sat, 10 Jan 2015 14:34:25 +0900
Subject: [PATCH 1/1] GPDMA_and_UIO_Device_Support


Signed-off-by: Auto Configured <auto.configured>
---
 arch/arm/mach-lm2/Makefile    |    1 +
 arch/arm/mach-lm2/core.h      |    3 ++
 arch/arm/mach-lm2/dma.c       |   74 +++++++++++++++++++++++++++++++++++++++++
 arch/arm/mach-lm2/lm2.c       |    3 ++
 drivers/dma/gpdma.c           |   16 +++++++++
 drivers/uio/uio_dmem_genirq.c |   14 ++++++--
 6 files changed, 109 insertions(+), 2 deletions(-)
 create mode 100644 arch/arm/mach-lm2/dma.c

diff --git a/arch/arm/mach-lm2/Makefile b/arch/arm/mach-lm2/Makefile
index 0478781..95b012d 100644
--- a/arch/arm/mach-lm2/Makefile
+++ b/arch/arm/mach-lm2/Makefile
@@ -7,3 +7,4 @@ obj-$(CONFIG_SMP)			+= platsmp.o
 obj-$(CONFIG_SATA_AHCI_PLATFORM)	+= sata.o
 obj-$(CONFIG_MMC_SDHCI_PLTFM)		+= sdhci.o
 obj-$(CONFIG_SPI_XSPI)			+= xspi.o
+obj-$(CONFIG_LM2_GPDMA)			+= dma.o
diff --git a/arch/arm/mach-lm2/core.h b/arch/arm/mach-lm2/core.h
index 3432744..647586b 100644
--- a/arch/arm/mach-lm2/core.h
+++ b/arch/arm/mach-lm2/core.h
@@ -32,4 +32,7 @@ extern	int	lm2_sdhci_init(void);
 #ifdef	CONFIG_SPI_XSPI
 extern	int	lm2_xspi_register(void);
 #endif	/* CONFIG_SPI_XSPI */
+#ifdef	CONFIG_LM2_GPDMA
+extern	int	lm2_dma_register(void);
+#endif
 #endif
diff --git a/arch/arm/mach-lm2/dma.c b/arch/arm/mach-lm2/dma.c
new file mode 100644
index 0000000..e682170
--- /dev/null
+++ b/arch/arm/mach-lm2/dma.c
@@ -0,0 +1,74 @@
+/*
+ * dma.c - dma driver register stub
+ * Copyright (C) Wind River Systems, Inc.
+ *
+ */
+#include <linux/kernel.h>
+#include <linux/platform_device.h>
+#include <linux/platform_data/uio_dmem_genirq.h>
+#include <linux/module.h>
+
+#include "mach/irqs.h"
+#include "mach/motherboard.h"
+
+static	struct resource	lm2_dma_resource[] = {
+	{
+		.start	= LM2_GPDMA_0_BASE,
+		.end	= LM2_GPDMA_0_BASE + 0x100,
+		.flags	= IORESOURCE_MEM,
+	},
+	{
+		.start	= 59,
+		.end	= 59,
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+static	struct resource	lm2_uiodma_resource[] = {
+	{
+		.start	= LM2_GPDMA_0_BASE,
+		.end	= LM2_GPDMA_0_BASE + 0x100,
+		.flags	= IORESOURCE_MEM,
+	},
+};
+
+static unsigned int region_sizes[] = {
+	(32 << 20),
+};
+
+static struct uio_dmem_genirq_pdata lm2_platform_data = {
+	.uioinfo = {
+		.name = "quatro-gpdma",
+		.version = "0",
+		.irq = -1,
+	},
+	.dynamic_region_sizes = region_sizes,
+	.num_dynamic_regions = ARRAY_SIZE(region_sizes),
+};
+
+static	struct platform_device	lm2_dma_device = {
+	.name	= "quatro-gpdma",
+	.id	= 0,
+	.num_resources	= ARRAY_SIZE( lm2_dma_resource ),
+	.resource	= lm2_dma_resource,
+};
+
+static	struct platform_device	lm2_uiodma_device = {
+	.name	= "uio_dmem_genirq",
+	.id	= 0,
+	.dev = {
+		.platform_data = &lm2_platform_data,
+		},
+	.num_resources	= ARRAY_SIZE( lm2_uiodma_resource ),
+	.resource	= lm2_uiodma_resource,
+};
+
+int	__init lm2_dma_register(void)
+{
+	int	result;
+	
+	result = platform_device_register( &lm2_dma_device );
+	result = platform_device_register( &lm2_uiodma_device );
+	return	result;
+}
+
diff --git a/arch/arm/mach-lm2/lm2.c b/arch/arm/mach-lm2/lm2.c
index ae9369f..27a92ea 100644
--- a/arch/arm/mach-lm2/lm2.c
+++ b/arch/arm/mach-lm2/lm2.c
@@ -368,6 +368,9 @@ static void __init lm2_init(void)
 #ifdef	CONFIG_SPI_XSPI
 	lm2_xspi_register();
 #endif	/* CONFIG_SPI_XSPI */
+#ifdef	CONFIG_LM2_GPDMA
+	lm2_dma_register();
+#endif
 
 }
 
diff --git a/drivers/dma/gpdma.c b/drivers/dma/gpdma.c
index b089db3..29be4fd 100644
--- a/drivers/dma/gpdma.c
+++ b/drivers/dma/gpdma.c
@@ -467,6 +467,7 @@ static int __init quatro_gpdma_probe(struct platform_device *pdev)
 		dev_dbg(&pdev->dev, "out of memory\n");
 		return -ENOMEM;
 	}
+#if 0
 	cdev_init(&dma->cdev, &quatro_gpdma_ops);
 	dman = MKDEV(QGPDMA_MAJOR, ndmas);
 	ret = cdev_add(&dma->cdev, dman, 1);
@@ -474,6 +475,21 @@ static int __init quatro_gpdma_probe(struct platform_device *pdev)
 		dev_dbg(&pdev->dev, "could not create char dev %d\n", ndmas);
 		goto out_err;
 	}
+#else
+	dman = MKDEV(QGPDMA_MAJOR, ndmas);
+	ret = register_chrdev_region(dman, 1, "gpdma");
+	if (ret) {
+		dev_dbg(&pdev->dev, "could not create char dev %d\n", ndmas);
+		goto out_err;
+	}
+	cdev_init(&dma->cdev, &quatro_gpdma_ops);
+	dma->cdev.owner = THIS_MODULE;
+	ret = cdev_add(&dma->cdev, dman, 1);
+	if (ret) {
+		dev_dbg(&pdev->dev, "could not create char dev %d\n", ndmas);
+		goto out_err;
+	}
+#endif
 	regs = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!regs) {
 		dev_dbg(&pdev->dev, "no mmio reg resource defined\n");
diff --git a/drivers/uio/uio_dmem_genirq.c b/drivers/uio/uio_dmem_genirq.c
index 252434c..e117f40 100644
--- a/drivers/uio/uio_dmem_genirq.c
+++ b/drivers/uio/uio_dmem_genirq.c
@@ -27,6 +27,7 @@
 #include <linux/of.h>
 #include <linux/of_platform.h>
 #include <linux/of_address.h>
+#include <linux/platform_device.h>
 
 #define DRIVER_NAME "uio_dmem_genirq"
 #define DMEM_MAP_ERROR (~0)
@@ -146,7 +147,7 @@ static int uio_dmem_genirq_irqcontrol(struct uio_info *dev_info, s32 irq_on)
 
 static int uio_dmem_genirq_probe(struct platform_device *pdev)
 {
-	struct uio_dmem_genirq_pdata *pdata = pdev->dev.platform_data;
+	struct uio_dmem_genirq_pdata *pdata = dev_get_platdata(&pdev->dev);
 	struct uio_info *uioinfo = &pdata->uioinfo;
 	struct uio_dmem_genirq_platdata *priv;
 	struct uio_mem *uiomem;
@@ -192,7 +193,11 @@ static int uio_dmem_genirq_probe(struct platform_device *pdev)
 		goto bad0;
 	}
 
+#if 0
 	dma_set_coherent_mask(&pdev->dev, DMA_BIT_MASK(32));
+#else
+	dma_set_coherent_mask(&pdev->dev, DMA_BIT_MASK(64));
+#endif
 
 	priv->uioinfo = uioinfo;
 	spin_lock_init(&priv->lock);
@@ -200,14 +205,16 @@ static int uio_dmem_genirq_probe(struct platform_device *pdev)
 	priv->pdev = pdev;
 	mutex_init(&priv->alloc_lock);
 
+#if 0
 	if (!uioinfo->irq) {
 		ret = platform_get_irq(pdev, 0);
 		if (ret < 0) {
 			dev_err(&pdev->dev, "failed to get IRQ\n");
-			goto bad0;
+			goto bad1;
 		}
 		uioinfo->irq = ret;
 	}
+#endif
 	uiomem = &uioinfo->mem[0];
 
 	for (i = 0; i < pdev->num_resources; ++i) {
@@ -347,12 +354,15 @@ static struct platform_driver uio_dmem_genirq = {
 		.name = DRIVER_NAME,
 		.owner = THIS_MODULE,
 		.pm = &uio_dmem_genirq_dev_pm_ops,
+#ifdef CONFIG_OF	/* ohkuma */
 		.of_match_table = uio_of_genirq_match,
+#endif
 	},
 };
 
 module_platform_driver(uio_dmem_genirq);
 
+
 MODULE_AUTHOR("Damian Hobson-Garcia");
 MODULE_DESCRIPTION("Userspace I/O platform driver with dynamic memory.");
 MODULE_LICENSE("GPL v2");
-- 
1.7.9.5

