From 159f7165b6db7853a3fcfda4ff04c1140d00b53b Mon Sep 17 00:00:00 2001
From: jthomas <jacob.thomas@windriver.com>
Date: Wed, 11 May 2016 11:34:21 +0900
Subject: [PATCH 065/170] 0001-SMP-HigtMem


diff --git a/arch/arm/kernel/atags_parse.c b/arch/arm/kernel/atags_parse.c
index 99b9854..4ad1056 100644
--- a/arch/arm/kernel/atags_parse.c
+++ b/arch/arm/kernel/atags_parse.c
@@ -50,7 +50,7 @@ static struct {
 };
 #else
 #ifndef	MEM_SIZE
-#define	MEM_SIZE	(768*1024*1024)		/* 2G */
+#define	MEM_SIZE	(760*1024*1024)		/* 2G */
 #endif	/* MEM_SIZE */
 static	struct {
 	struct	tag_header	hdr1;
@@ -281,8 +281,17 @@ struct machine_desc * __init setup_machine_tags(phys_addr_t __atags_pointer,
 		tags = (struct tag *)&default_tags;
 	}
 #endif
+#if 0	/* ohkuma */
+	if (mdesc->fixup) {
+putstr("## fixup\n");
+		mdesc->fixup(tags, &from, &meminfo);
+sprintf(buf,"## meminfo.nr_banks=%d\n", meminfo.nr_banks);
+putstr(buf);
+	}
+#else
 	if (mdesc->fixup)
 		mdesc->fixup(tags, &from, &meminfo);
+#endif
 
 	if (tags->hdr.tag == ATAG_CORE) {
 		if (meminfo.nr_banks != 0)
diff --git a/arch/arm/kernel/setup.c b/arch/arm/kernel/setup.c
index d0293d7..e76e077 100644
--- a/arch/arm/kernel/setup.c
+++ b/arch/arm/kernel/setup.c
@@ -115,7 +115,7 @@ struct outer_cache_fns outer_cache __read_mostly;
 EXPORT_SYMBOL(outer_cache);
 #endif
 
-#if 1 /* yamano */
+#if 0 /* yamano */
 #define UART_BASE       0xfc160000
 #define	UART_BASE2	0xffc10000
 #define UART_DATA(base) (*(volatile unsigned char *)((base) + 0x10))
@@ -146,7 +146,10 @@ static  void    putstr(u32 base,const char *ptr)
         }
         flush(base);
 }
-
+#else
+#define	putchar(a,b)	{}
+#define	flush(a)	{}
+#define	putstr(a,b)	{}
 #endif  /* yamano */
 
 /*
@@ -853,11 +856,55 @@ void __init setup_arch(char **cmdline_p)
 	/* populate cmd_line too for later use, preserving boot_command_line */
 	strlcpy(cmd_line, boot_command_line, COMMAND_LINE_SIZE);
 	*cmdline_p = cmd_line;
+#if 0	/* ohkuma */
+sprintf(buf,"##1 meminfo.nr_banks=%d\n",meminfo.nr_banks);
+putstr(UART_BASE, buf);
+sprintf(buf,"##1 meminfo.bank[0].start=0x%llx\n",meminfo.bank[0].start);
+putstr(UART_BASE, buf);
+sprintf(buf,"##1 meminfo.bank[0].size =0x%lx\n" ,meminfo.bank[0].size);
+putstr(UART_BASE, buf);
+#endif
 	parse_early_param();
 
+#if 1	/* ohkuma */
+sprintf(buf,"##2 meminfo.nr_banks=%d\n",meminfo.nr_banks);
+putstr(UART_BASE, buf);
+sprintf(buf,"##2 meminfo.bank[0].highmem =%d\n",meminfo.bank[0].highmem);
+putstr(UART_BASE, buf);
+sprintf(buf,"##2 meminfo.bank[0].start=0x%llx\n",meminfo.bank[0].start);
+putstr(UART_BASE, buf);
+sprintf(buf,"##2 meminfo.bank[0].size =0x%lx\n" ,meminfo.bank[0].size);
+putstr(UART_BASE, buf);
+if (meminfo.nr_banks >1 ) {
+sprintf(buf,"##2 meminfo.bank[1].highmem =%d\n",meminfo.bank[1].highmem);
+putstr(UART_BASE, buf);
+sprintf(buf,"##2 meminfo.bank[1].start=0x%llx\n",meminfo.bank[1].start);
+putstr(UART_BASE, buf);
+sprintf(buf,"##2 meminfo.bank[1].size =0x%lx\n" ,meminfo.bank[1].size);
+putstr(UART_BASE, buf);
+}
+#endif
 //putstr(UART_BASE,"parse_early_param\n");
 	sort(&meminfo.bank, meminfo.nr_banks, sizeof(meminfo.bank[0]), meminfo_cmp, NULL);
 	sanity_check_meminfo();
+#if 1	/* ohkuma */
+sprintf(buf,"##3 meminfo.nr_banks=%d\n",meminfo.nr_banks);
+putstr(UART_BASE, buf);
+sprintf(buf,"##3 meminfo.bank[0].highmem =%d\n",meminfo.bank[0].highmem);
+putstr(UART_BASE, buf);
+sprintf(buf,"##3 meminfo.bank[0].start=0x%llx\n",meminfo.bank[0].start);
+putstr(UART_BASE, buf);
+sprintf(buf,"##3 meminfo.bank[0].size =0x%lx\n" ,meminfo.bank[0].size);
+putstr(UART_BASE, buf);
+if (meminfo.nr_banks >1 ) {
+sprintf(buf,"##3 meminfo.bank[1].highmem =%d\n",meminfo.bank[1].highmem);
+putstr(UART_BASE, buf);
+sprintf(buf,"##3 meminfo.bank[1].start=0x%llx\n",meminfo.bank[1].start);
+putstr(UART_BASE, buf);
+sprintf(buf,"##3 meminfo.bank[1].size =0x%lx\n" ,meminfo.bank[1].size);
+putstr(UART_BASE, buf);
+}
+#endif
 //putstr(UART_BASE,"sanity_check_meminfo_OK\n");
 	arm_memblock_init(&meminfo, mdesc);
 //putstr(UART_BASE,"arm_memblock_init\n");
diff --git a/arch/arm/mach-lm2/Makefile.boot b/arch/arm/mach-lm2/Makefile.boot
index 4ea1013..abeff2c 100644
--- a/arch/arm/mach-lm2/Makefile.boot
+++ b/arch/arm/mach-lm2/Makefile.boot
@@ -3,6 +3,6 @@
 #   zreladdr-y	+= 0x05008000
 #params_phys-y	:= 0x05000100
 #initrd_phys-y	:= 0x05000000
-   zreladdr-y	+= 0x90008000
-params_phys-y	:= 0x90000100
-initrd_phys-y	:= 0x90000000
+   zreladdr-y	+= 0x00008000
+params_phys-y	:= 0x00000100
+initrd_phys-y	:= 0x00000000
diff --git a/arch/arm/mach-lm2/lm2.c b/arch/arm/mach-lm2/lm2.c
index c6523ab..cb82e17 100644
--- a/arch/arm/mach-lm2/lm2.c
+++ b/arch/arm/mach-lm2/lm2.c
@@ -54,20 +54,25 @@ extern	void	lm2_clockevent_init(int irq, void __iomem *gpt);
 
 static	void	lm2_putchar(unsigned long base, char c)
 {
+#if 0
         while((UART_STAT(base) & 0x40) == 0)
                 barrier();
         UART_DATA(base) = c;
+#endif
         return;
 }
 
 static  void	lm2_flush(unsigned long base)
 {
+#if 0
         while((UART_STAT(base) & 0x40) == 0)
                 barrier();
+#endif
 }
 
 void	lm2_printk(unsigned long base, const char *ptr)
 {
+#if 0
         char    c;
 
         while((c = *ptr++) != '\0'){
@@ -76,6 +81,7 @@ void	lm2_printk(unsigned long base, const char *ptr)
                 lm2_putchar(base,c);
         }
 	lm2_flush(base);
+#endif
 }
 
 /*
@@ -83,6 +89,7 @@ void	lm2_printk(unsigned long base, const char *ptr)
  * serial ,GIC, timer, ethernet, SPI etc.
  */
 static struct map_desc lm2_io_desc[] __initdata = {
+#if 0
 	{
 		.virtual	= 0xffc00000,
 		.pfn		= __phys_to_pfn(0x0000000004060000ULL),
@@ -96,6 +103,7 @@ static struct map_desc lm2_io_desc[] __initdata = {
 		.length		= SZ_4K,
 		.type		= MT_DEVICE,
 	},
+#endif
 };
 
 /*
@@ -340,10 +348,8 @@ static void __init lm2_init_irq(void)
 static	void __init lm2_fixup_mem(struct tag *tags, char **form, struct meminfo *meminfo)
 {
 #if 1	/* yamano debug */
-	meminfo->bank[0].start = 0x890000000ULL;
+	meminfo->bank[0].start = PHYS_OFFSET;
 	meminfo->bank[0].size = 760*1024*1024;
-//	meminfo->bank[1].start = 0x8bf800000ULL;
-//	meminfo->bank[1].size = SZ_512M+SZ_512M;
 	meminfo->nr_banks = 1;
 #endif /* yamano debug */
 	return;
diff --git a/arch/arm/mm/init.c b/arch/arm/mm/init.c
index 0d23f0f..8975d64 100644
--- a/arch/arm/mm/init.c
+++ b/arch/arm/mm/init.c
@@ -36,7 +36,7 @@
 
 #include "mm.h"
 
-#if 1 /* yamano */
+#if 0 /* yamano */
 #define UART_BASE       0xfc160000
 #define UART_BASE2      0xffc10000
 #define UART_DATA(base) (*(volatile unsigned char *)((base) + 0x10))
@@ -74,6 +74,10 @@ static  int     getchar(u32 base)
                 barrier();
         return  UART_DATA(base);
 }
+#else
+#define putchar(a,b)    {}
+#define flush(a)        {}
+#define putstr(a,b)     {}
 #endif  /* yamano */
 
 
@@ -633,6 +637,9 @@ void __init mem_init(void)
 	extern u32 dtcm_end;
 	extern u32 itcm_end;
 #endif
+#if 1   /* ohkuma */
+printk(KERN_WARNING "## mem_init : \n");
+#endif
 
 	max_mapnr   = pfn_to_page(max_pfn + PHYS_PFN_OFFSET) - mem_map;
 
diff --git a/arch/arm/mm/mmu.c b/arch/arm/mm/mmu.c
index 702b8dd..69dd51b 100644
--- a/arch/arm/mm/mmu.c
+++ b/arch/arm/mm/mmu.c
@@ -72,7 +72,7 @@ struct cachepolicy {
 	pteval_t	pte;
 	pteval_t	pte_s2;
 };
-#if 1 /* yamano */
+#if 0 /* yamano */
 #define UART_BASE       0xfc160000
 #define UART_BASE2      0xffc10000
 #define UART_DATA(base) (*(volatile unsigned char *)((base) + 0x10))
@@ -111,6 +111,11 @@ static  int     getchar(u32 base)
                 barrier();
         return  UART_DATA(base);
 }
+#else
+static int	yamadebug = 0;
+#define putchar(a,b)    {}
+#define flush(a)        {}
+#define putstr(a,b)     {}
 #endif  /* yamano */
 
 #ifdef CONFIG_ARM_LPAE
@@ -648,6 +653,9 @@ static void __init *early_alloc_aligned(unsigned long sz, unsigned long align)
 
 static void __init *early_alloc(unsigned long sz)
 {
+#if 1   /* ohkuma */
+printk(KERN_WARNING "## early_alloc : sz=0x%x \n", sz);
+#endif
 //if(yamadebug == 0)
 //putstr(UART_BASE,"early_alloc\n");
 //else
@@ -657,6 +665,9 @@ static void __init *early_alloc(unsigned long sz)
 
 static pte_t * __init early_pte_alloc(pmd_t *pmd, unsigned long addr, unsigned long prot)
 {
+#if 1   /* ohkuma */
+printk(KERN_WARNING "## early_pte_alloc : addr=0x%x prot=0x%x \n", addr, prot);
+#endif
 //if(yamadebug == 1)
 //putstr(UART_BASE2,"early_pte_alloc\n");
 	if (pmd_none(*pmd)) {
@@ -858,7 +869,9 @@ static void __init create_mapping(struct map_desc *md)
 	addr = md->virtual & PAGE_MASK;
 	phys = __pfn_to_phys(md->pfn);
 	length = PAGE_ALIGN(md->length + (md->virtual & ~PAGE_MASK));
-
+#if 1	/* ohkuma */
+printk(KERN_WARNING "## create_mapping : phys=0x%llx virt=0x%x\n", phys, md->virtual);
+#endif
 	if (type->prot_l1 == 0 && ((addr | phys | length) & ~SECTION_MASK)) {
 		printk(KERN_WARNING "BUG: map for 0x%08llx at 0x%08lx can not "
 		       "be mapped using pages, ignoring.\n",
@@ -1055,6 +1068,10 @@ void __init sanity_check_meminfo(void)
 	int i, j, highmem = 0;
 	phys_addr_t vmalloc_limit = __pa(vmalloc_min - 1) + 1;
 	char	buf[256];	/* yamano debug */
+#if 1   /* ohkuma */
+printk(KERN_WARNING "## sanity_check_meminfo : vmalloc_limit=0x%llx arm_lowmem_limit=0x%llx\n", vmalloc_limit, arm_lowmem_limit);
+printk(KERN_WARNING "## sanity_check_meminfo : meminfo.nr_banks=%d\n", meminfo.nr_banks);
+#endif
 
 //putstr(UART_BASE, "sanity\n");
 //sprintf(buf, "%llx vmlimit\n", vmalloc_limit);
@@ -1241,21 +1258,22 @@ static void __init devicemaps_init(struct machine_desc *mdesc)
 	unsigned long addr;
 	phys_addr_t	paddr;
 	void *vectors;
+	char	buf[128];
 
-//putstr(UART_BASE,"devicemaps_init_entry\n");
+putstr(UART_BASE,"devicemaps_init_entry\n");
 	/*
 	 * Allocate the vector page early.
 	 */
 	vectors = early_alloc(PAGE_SIZE * 2);
-//putstr(UART_BASE,"early_alloc for vector\n");
+putstr(UART_BASE,"early_alloc for vector\n");
 
 	early_trap_init(vectors);
-//putstr(UART_BASE,"early_trap_init\n");
+putstr(UART_BASE,"early_trap_init\n");
 
 	for (addr = VMALLOC_START; addr; addr += PMD_SIZE)
 		pmd_clear(pmd_off_k(addr));
 
-//putstr(UART_BASE,"pmd_clear\n");
+putstr(UART_BASE,"pmd_clear\n");
 	/*
 	 * Map the kernel if it is XIP.
 	 * It is always first in the modulearea.
@@ -1267,7 +1285,7 @@ static void __init devicemaps_init(struct machine_desc *mdesc)
 	map.type = MT_ROM;
 	create_mapping(&map);
 #endif
-//putstr(UART_BASE,"XIP\n");
+putstr(UART_BASE,"XIP\n");
 	/*
 	 * Map the cache flushing regions.
 	 */
@@ -1285,7 +1303,7 @@ static void __init devicemaps_init(struct machine_desc *mdesc)
 	map.type = MT_MINICLEAN;
 	create_mapping(&map);
 #endif
-//putstr(UART_BASE,"FLASH\n");
+putstr(UART_BASE,"FLASH\n");
 
 	/*
 	 * Create a mapping for the machine vectors at the high-vectors
@@ -1302,6 +1320,8 @@ static void __init devicemaps_init(struct machine_desc *mdesc)
 #else
 	map.type = MT_LOW_VECTORS;
 #endif
+sprintf(buf,"create_mapping phy=0x%llx vir=0x%x\n", virt_to_phys(vectors), map.virtual);
+putstr(UART_BASE,buf);
 	create_mapping(&map);
 //putstr(UART_BASE,"vector\n");
 
@@ -1344,7 +1364,10 @@ static void __init devicemaps_init(struct machine_desc *mdesc)
 static void __init kmap_init(void)
 {
 #ifdef CONFIG_HIGHMEM
-//putstr(UART_BASE2,"kmap_init entry\n");
+#if 1	/* ohkuma */
+printk(KERN_WARNING "## kmap_init : PKMAP_BASE=0x%x FIXADDR_START=0x%x \n", PKMAP_BASE, FIXADDR_START);
+printk(KERN_WARNING "## kmap_init : _PAGE_KERNEL_TABLE=0x%x\n", _PAGE_KERNEL_TABLE);
+#endif
 	pkmap_page_table = early_pte_alloc(pmd_off_k(PKMAP_BASE),
 		PKMAP_BASE, _PAGE_KERNEL_TABLE);
 
@@ -1356,6 +1379,7 @@ static void __init kmap_init(void)
 static void __init map_lowmem(void)
 {
 	struct memblock_region *reg;
+	char	buf[128];
 
 	/* Map all the lowmem memory banks. */
 	for_each_memblock(memory, reg) {
@@ -1371,6 +1395,8 @@ static void __init map_lowmem(void)
 		map.virtual = __phys_to_virt(start);
 		map.length = end - start;
 		map.type = MT_MEMORY;
+//sprintf(buf,"create_mapping phy=0x%llx vir=0x%x\n", start, map.virtual);
+//putstr(UART_BASE,buf);
 		create_mapping(&map);
 	}
 }
@@ -1385,24 +1411,24 @@ void __init paging_init(struct machine_desc *mdesc)
 	char	buf[64];
 	int c;
 
-//putstr(UART_BASE,"paging_init\n");
+putstr(UART_BASE,"paging_init\n");
 	memblock_set_current_limit(arm_lowmem_limit);
-//putstr(UART_BASE,"memblock_set_current_limit\n");
+putstr(UART_BASE,"memblock_set_current_limit\n");
 	build_mem_type_table();
-//putstr(UART_BASE,"build_mem_type_table\n");
+putstr(UART_BASE,"build_mem_type_table\n");
 	prepare_page_table();
-//putstr(UART_BASE,"prepare_page_table\n");
+putstr(UART_BASE,"prepare_page_table\n");
 	map_lowmem();
-//putstr(UART_BASE,"map_lowmem\n");
+putstr(UART_BASE,"map_lowmem\n");
 	dma_contiguous_remap();
-//putstr(UART_BASE,"dma_contiguous_remap\n");
+putstr(UART_BASE,"dma_contiguous_remap\n");
 	devicemaps_init(mdesc);	/* reset debug I/O map yamano befor used UART_BASE2 */
 	yamadebug = 1;
-//putstr(UART_BASE2,"devicemaps_init\n");
+putstr(UART_BASE2,"devicemaps_init\n");
 	kmap_init();
-//putstr(UART_BASE2,"kmap_init\n");
+putstr(UART_BASE2,"kmap_init\n");
 	tcm_init();
-//putstr(UART_BASE2,"tcm_init\n");
+putstr(UART_BASE2,"tcm_init\n");
 	top_pmd = pmd_off_k(0xffff0000);
 //putstr(UART_BASE2,"top_off_k\n");
 
diff --git a/arch/arm/mm/proc-v7-3level.S b/arch/arm/mm/proc-v7-3level.S
index 0133f87..fb90a03 100644
--- a/arch/arm/mm/proc-v7-3level.S
+++ b/arch/arm/mm/proc-v7-3level.S
@@ -47,6 +47,7 @@
 #  define rpgdh	r0
 #endif
 
+/*#define	TTBL0_OFF*/
 /*
  * cpu_v7_switch_mm(pgd_phys, tsk)
  *
@@ -123,7 +124,10 @@ ENDPROC(cpu_v7_set_pte_ext)
         .macro  v7_ttb_setup, zero, ttbr0, ttbr1, tmp
 	ldr	\tmp, =swapper_pg_dir		@ swapper_pg_dir virtual address
 	mov	\tmp, \tmp, lsr #ARCH_PGD_SHIFT
-/*	cmp	\ttbr1, \tmp			@ PHYS_OFFSET > PAGE_OFFSET? */
+#ifdef	TTBL0_OFF
+#else
+	cmp	\ttbr1, \tmp			@ PHYS_OFFSET > PAGE_OFFSET?
+#endif
 	mrc	p15, 0, \tmp, c2, c0, 2		@ TTB control register
 	orr	\tmp, \tmp, #TTB_EAE
 	ALT_SMP(orr	\tmp, \tmp, #TTB_FLAGS_SMP)
@@ -135,23 +139,35 @@ ENDPROC(cpu_v7_set_pte_ext)
 	 * otherwise booting secondary CPUs would end up using TTBR1 for the
 	 * identity mapping set up in TTBR0.
 	 */
-/*	orrls	\tmp, \tmp, #TTBR1_SIZE				@ TTBCR.T1SZ */
+#ifdef	TTBL0_OFF
 	orr	\tmp, \tmp, #TTBR1_SIZE				@ TTBCR.T1SZ
+#else
+	orrls	\tmp, \tmp, #TTBR1_SIZE				@ TTBCR.T1SZ
+#endif
 	mcr	p15, 0, \tmp, c2, c0, 2				@ TTBCR
 	isb							@ fxcl
 	mov	\tmp, \ttbr1, lsr #(32 - ARCH_PGD_SHIFT)	@ upper bits
 	mov	\ttbr1, \ttbr1, lsl #ARCH_PGD_SHIFT		@ lower bits
-/*	addls	\ttbr1, \ttbr1, #TTBR1_OFFSET */
+#ifdef	TTBL0_OFF
 	add	\ttbr1, \ttbr1, #TTBR1_OFFSET
+#else
+	addls	\ttbr1, \ttbr1, #TTBR1_OFFSET
+#endif
 	mcrr	p15, 1, \ttbr1, \zero, c2			@ load TTBR1
 	isb							@ fxcl 
-/*	mov	\tmp, \ttbr0, lsr #(32 - ARCH_PGD_SHIFT)	@ upper bits */
-/*	mov	\ttbr0, \ttbr0, lsl #ARCH_PGD_SHIFT		@ lower bits */
-/*	mcrr	p15, 0, \ttbr0, \zero, c2			@ load TTBR0 */
+#ifdef	TTBL0_OFF
+#else
+	mov	\tmp, \ttbr0, lsr #(32 - ARCH_PGD_SHIFT)	@ upper bits
+	mov	\ttbr0, \ttbr0, lsl #ARCH_PGD_SHIFT		@ lower bits
+	mcrr	p15, 0, \ttbr0, \zero, c2			@ load TTBR0
+#endif
 	isb							@ fxcl
 	mcrr	p15, 1, \ttbr1, \zero, c2			@ load TTBR1
 	isb							@ fxcl
-/*	mcrr	p15, 0, \ttbr0, \zero, c2			@ load TTBR0 */
+#ifdef	TTBL0_OFF
+#else
+	mcrr	p15, 0, \ttbr0, \zero, c2			@ load TTBR0
+#endif
 	isb
 	.endm
 
diff --git a/init/main.c b/init/main.c
index 81a2584..013c4d3 100644
--- a/init/main.c
+++ b/init/main.c
@@ -517,7 +517,7 @@ asmlinkage void __init start_kernel(void)
 #if 1	/* ohkuma to TLB Flush */
 	asm volatile("mcr p15,0,r0,c8,c6,0");
 #endif
-	PHYS_OFFSET = 0x0000000890000000ULL;	/* yamano debug */
+	PHYS_OFFSET = 0x0000000800000000ULL;	/* yamano debug */
 #if 1   /* ohkuma */
 sprintf(buf, "__pv_phys_offset=0x%llx(%llx)\n", __pv_phys_offset, PHYS_OFFSET);
 lm2_printk(UART_BASE,buf);
diff --git a/init/main.c.orig b/init/main.c.orig
index a93067f..eb25efd 100644
--- a/init/main.c.orig
+++ b/init/main.c.orig
@@ -518,6 +518,10 @@ asmlinkage void __init start_kernel(void)
 	asm volatile("mcr p15,0,r0,c8,c6,0");
 #endif
 	PHYS_OFFSET = 0x0000000890000000ULL;	/* yamano debug */
+#if 1   /* ohkuma */
+sprintf(buf, "__pv_phys_offset=0x%llx(%llx)\n", __pv_phys_offset, PHYS_OFFSET);
+lm2_printk(UART_BASE,buf);
+#endif
 	lockdep_init();
 	smp_setup_processor_id();
 	debug_objects_early_init();
-- 
1.7.1

