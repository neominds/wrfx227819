From 09cf7f62b5dda362bca835b358ecff3645340228 Mon Sep 17 00:00:00 2001
From: jthomas <jacob.thomas@windriver.com>
Date: Wed, 11 May 2016 11:34:17 +0900
Subject: [PATCH 062/170] 0001-SMP_fixed


diff --git a/arch/arm/kernel/smp.c b/arch/arm/kernel/smp.c
index 35eb89a..dedd0d7 100644
--- a/arch/arm/kernel/smp.c
+++ b/arch/arm/kernel/smp.c
@@ -81,9 +81,6 @@ void __init smp_set_ops(struct smp_operations *ops)
 static unsigned long get_arch_pgd(pgd_t *pgd)
 {
 	phys_addr_t pgdir = virt_to_phys(pgd);
-#if 1	/* debug */
-	printk("### pgd=%p pgdir=%llx\n", pgd, pgdir);
-#endif
 	BUG_ON(pgdir & ARCH_PGD_MASK);
 	return pgdir >> ARCH_PGD_SHIFT;
 }
@@ -96,9 +93,6 @@ int __cpuinit __cpu_up(unsigned int cpu, struct task_struct *idle)
 	 * We need to tell the secondary core where to find
 	 * its stack and the page tables.
 	 */
-#if 1	/* debug */
-	printk("#### get_arch_pgdi(idmap_pgd)=%p idmap_pgd=%p\n", get_arch_pgd(idmap_pgd), idmap_pgd);
-#endif
 	secondary_data.stack = task_stack_page(idle) + THREAD_START_SP;
 	secondary_data.pgdir = get_arch_pgd(idmap_pgd);
 	secondary_data.swapper_pg_dir = get_arch_pgd(swapper_pg_dir);
diff --git a/arch/arm/mm/proc-v7-3level.S b/arch/arm/mm/proc-v7-3level.S
index 4bc8a3d..0133f87 100644
--- a/arch/arm/mm/proc-v7-3level.S
+++ b/arch/arm/mm/proc-v7-3level.S
@@ -120,10 +120,10 @@ ENDPROC(cpu_v7_set_pte_ext)
 	 * Macro for setting up the TTBRx and TTBCR registers.
 	 * - \ttbr1 updated.
 	 */
-	.macro	v7_ttb_setup, zero, ttbr0, ttbr1, tmp
+        .macro  v7_ttb_setup, zero, ttbr0, ttbr1, tmp
 	ldr	\tmp, =swapper_pg_dir		@ swapper_pg_dir virtual address
 	mov	\tmp, \tmp, lsr #ARCH_PGD_SHIFT
-	cmp	\ttbr1, \tmp			@ PHYS_OFFSET > PAGE_OFFSET?
+/*	cmp	\ttbr1, \tmp			@ PHYS_OFFSET > PAGE_OFFSET? */
 	mrc	p15, 0, \tmp, c2, c0, 2		@ TTB control register
 	orr	\tmp, \tmp, #TTB_EAE
 	ALT_SMP(orr	\tmp, \tmp, #TTB_FLAGS_SMP)
@@ -135,21 +135,23 @@ ENDPROC(cpu_v7_set_pte_ext)
 	 * otherwise booting secondary CPUs would end up using TTBR1 for the
 	 * identity mapping set up in TTBR0.
 	 */
-	orrls	\tmp, \tmp, #TTBR1_SIZE				@ TTBCR.T1SZ
+/*	orrls	\tmp, \tmp, #TTBR1_SIZE				@ TTBCR.T1SZ */
+	orr	\tmp, \tmp, #TTBR1_SIZE				@ TTBCR.T1SZ
 	mcr	p15, 0, \tmp, c2, c0, 2				@ TTBCR
 	isb							@ fxcl
 	mov	\tmp, \ttbr1, lsr #(32 - ARCH_PGD_SHIFT)	@ upper bits
 	mov	\ttbr1, \ttbr1, lsl #ARCH_PGD_SHIFT		@ lower bits
-	addls	\ttbr1, \ttbr1, #TTBR1_OFFSET
+/*	addls	\ttbr1, \ttbr1, #TTBR1_OFFSET */
+	add	\ttbr1, \ttbr1, #TTBR1_OFFSET
 	mcrr	p15, 1, \ttbr1, \zero, c2			@ load TTBR1
 	isb							@ fxcl 
-	mov	\tmp, \ttbr0, lsr #(32 - ARCH_PGD_SHIFT)	@ upper bits
-	mov	\ttbr0, \ttbr0, lsl #ARCH_PGD_SHIFT		@ lower bits
-	mcrr	p15, 0, \ttbr0, \zero, c2			@ load TTBR0
+/*	mov	\tmp, \ttbr0, lsr #(32 - ARCH_PGD_SHIFT)	@ upper bits */
+/*	mov	\ttbr0, \ttbr0, lsl #ARCH_PGD_SHIFT		@ lower bits */
+/*	mcrr	p15, 0, \ttbr0, \zero, c2			@ load TTBR0 */
 	isb							@ fxcl
 	mcrr	p15, 1, \ttbr1, \zero, c2			@ load TTBR1
 	isb							@ fxcl
-	mcrr	p15, 0, \ttbr0, \zero, c2			@ load TTBR0
+/*	mcrr	p15, 0, \ttbr0, \zero, c2			@ load TTBR0 */
 	isb
 	.endm
 
diff --git a/arch/arm/plat-waikiki/headsmp.S b/arch/arm/plat-waikiki/headsmp.S
index 087fb3c..df1859b 100644
--- a/arch/arm/plat-waikiki/headsmp.S
+++ b/arch/arm/plat-waikiki/headsmp.S
@@ -26,9 +26,6 @@
  */
 #ifdef	SOC_QUATRO5500
 ENTRY(lm2_secondary_startup)
-#if 1 /* FX */
-	wfi
-#endif
         b out_of_vector
         ldr pc,=4
         ldr pc,=8
@@ -82,12 +79,20 @@ out_of_vector:
         mcr     p15, 0, r0, c1, c0, 1   @ set ACTLR
 
         bl      v7_invalidate_l1
-#if 0 /* FX */
-	wfi
-#endif
+#if 1
+	/*
+	 * we've been released from the holding pen: secondary_stack
+	 * should now contain the SVC stack for this core
+	 */
+	b	secondary_startup
 
+	.align
+1:	.long	.
+	.long	pen_release
+#else
         ldr     r1, 1f
         bx      r1
+#endif
 ENDPROC(lm2_secondary_startup)
 
         .align 2
diff --git a/arch/arm/plat-waikiki/platsmp.c b/arch/arm/plat-waikiki/platsmp.c
index 1487499..df5726d 100644
--- a/arch/arm/plat-waikiki/platsmp.c
+++ b/arch/arm/plat-waikiki/platsmp.c
@@ -36,21 +36,13 @@ static void __cpuinit write_pen_release(int val)
 {
 	pen_release = val;
 	smp_wmb();
-#if 1
 	sync_cache_w(&pen_release);
-#else
-	__cpuc_flush_dcache_area((void *)&pen_release, sizeof(pen_release));
-	outer_clean_range(__pa(&pen_release), __pa(&pen_release + 1));
-#endif
 }
 
 static DEFINE_SPINLOCK(boot_lock);
 
 void __cpuinit waikiki_secondary_init(unsigned int cpu)
 {
-#if 1	/* debug */
-	printk("#### %s\n", __func__); //FX
-#endif
 	/*
 	 * if any interrupts are already enabled for the primary
 	 * core (e.g. timer irq), then they will not have been enabled
@@ -73,11 +65,7 @@ void __cpuinit waikiki_secondary_init(unsigned int cpu)
 int __cpuinit waikiki_boot_secondary(unsigned int cpu, struct task_struct *idle)
 {
 	unsigned long timeout;
-#if 1	// FX
 	unsigned char *cpu1_addr;
-	volatile int a = 1;
-	printk("#### %s(cpu=%x)\n", __func__, cpu); // FX
-#endif
 
 	/*
 	 * Set synchronisation state between this boot processor
@@ -98,18 +86,9 @@ int __cpuinit waikiki_boot_secondary(unsigned int cpu, struct task_struct *idle)
 	 * the boot monitor to read the system wide flags register,
 	 * and branch to the address found there.
 	 */
-#if 1
-	write_pen_release(cpu);
-// FX
-#if 1
 	cpu1_addr = ioremap(0x043B0000,0x32);
 	writel(0x3ff, cpu1_addr + 0x24);
 	iounmap(cpu1_addr);
-//	while (a);
-#endif
-#else
-	gic_raise_softirq(cpumask_of(cpu), 1);
-#endif
 
 	timeout = jiffies + (6 * HZ);
 	while (time_before(jiffies, timeout)) {
-- 
1.7.1

