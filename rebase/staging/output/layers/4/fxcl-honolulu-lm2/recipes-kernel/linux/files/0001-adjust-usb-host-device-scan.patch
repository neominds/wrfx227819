From a3945bd1c88d84bd27be47c9bc66ba6c8fa2a919 Mon Sep 17 00:00:00 2001
From: jthomas <jacob.thomas@windriver.com>
Date: Wed, 11 May 2016 11:34:42 +0900
Subject: [PATCH 081/170] 0001-adjust-usb-host-device-scan


diff --git a/drivers/usb/host/xhci-mem.c b/drivers/usb/host/xhci-mem.c
index a95beaa..c19d24f 100644
--- a/drivers/usb/host/xhci-mem.c
+++ b/drivers/usb/host/xhci-mem.c
@@ -2457,7 +2457,7 @@ int xhci_mem_init(struct xhci_hcd *xhci, gfp_t flags)
 	 * something other than the default (~1ms minimum between interrupts).
 	 * See section 5.5.1.2.
 	 */
-printk("## %s addr_dev init \n");
+//printk("## %s addr_dev init \n");
 	init_completion(&xhci->addr_dev);
 	for (i = 0; i < MAX_HC_SLOTS; ++i)
 		xhci->devs[i] = NULL;
@@ -2481,7 +2481,7 @@ printk("## %s addr_dev init \n");
 	temp &= ~DEV_NOTE_MASK;
 	temp |= DEV_NOTE_FWAKE;
 	xhci_writel(xhci, temp, &xhci->op_regs->dev_notification);
-printk("## %s mem init normal exit\n",__FUNCTION__);
+//printk("## %s mem init normal exit\n",__FUNCTION__);
 
 	return 0;
 
@@ -2490,6 +2490,6 @@ fail:
 	xhci_halt(xhci);
 	xhci_reset(xhci);
 	xhci_mem_cleanup(xhci);
-printk("## %s mem init error exit\n",__FUNCTION__);
+//printk("## %s mem init error exit\n",__FUNCTION__);
 	return -ENOMEM;
 }
diff --git a/drivers/usb/host/xhci-plat.c b/drivers/usb/host/xhci-plat.c
index 0fe6460..d93b7ef 100644
--- a/drivers/usb/host/xhci-plat.c
+++ b/drivers/usb/host/xhci-plat.c
@@ -152,7 +152,7 @@ static int xhci_plat_probe(struct platform_device *pdev)
 	if (ret)
 		goto put_usb3_hcd;
 
-dev_info(&pdev->dev, "==================== USB Normal End =========================\n");
+//dev_info(&pdev->dev, "==================== USB Normal End =========================\n");
 	return 0;
 
 put_usb3_hcd:
diff --git a/drivers/usb/host/xhci-ring.c b/drivers/usb/host/xhci-ring.c
index 07ec694..cbfab95 100644
--- a/drivers/usb/host/xhci-ring.c
+++ b/drivers/usb/host/xhci-ring.c
@@ -187,7 +187,7 @@ static void inc_deq(struct xhci_hcd *xhci, struct xhci_ring *ring)
 	} while (last_trb(xhci, ring, ring->deq_seg, ring->dequeue));
 
 	addr = (unsigned long long) xhci_trb_virt_to_dma(ring->deq_seg, ring->dequeue);
-printk("### %s exit addr= %llx\n",__FUNCTION__,addr);
+//printk("### %s exit addr= %llx\n",__FUNCTION__,addr);
 }
 
 /*
@@ -266,7 +266,7 @@ static void inc_enq(struct xhci_hcd *xhci, struct xhci_ring *ring,
 		wmb();	/* yamano debug */
 	}
 	addr = (unsigned long long) xhci_trb_virt_to_dma(ring->enq_seg, ring->enqueue);
-printk("### %s exit addr= %llx\n",__FUNCTION__,addr);
+//printk("### %s exit addr= %llx\n",__FUNCTION__,addr);
 }
 
 /*
@@ -1378,7 +1378,7 @@ static void handle_cmd_completion(struct xhci_hcd *xhci,
 	unsigned int ep_index;
 	struct xhci_ring *ep_ring;
 	unsigned int ep_state;
-printk("### %s entry \n",__FUNCTION__);
+//printk("### %s entry \n",__FUNCTION__);
 	cmd_dma = le64_to_cpu(event->cmd_trb);
 	cmd_dequeue_dma = xhci_trb_virt_to_dma(xhci->cmd_ring->deq_seg,
 			xhci->cmd_ring->dequeue);
@@ -1421,7 +1421,7 @@ printk("### %s entry \n",__FUNCTION__);
 			xhci->slot_id = slot_id;
 		else
 			xhci->slot_id = 0;
-printk("### %s TRB_ENABLE_SLOT\n",__FUNCTION__);	/* yamano */
+//printk("### %s TRB_ENABLE_SLOT\n",__FUNCTION__);	/* yamano */
 		complete(&xhci->addr_dev);
 		break;
 	case TRB_TYPE(TRB_DISABLE_SLOT):
@@ -1532,7 +1532,7 @@ static void handle_vendor_event(struct xhci_hcd *xhci,
 		union xhci_trb *event)
 {
 	u32 trb_type;
-printk("### %s \n",__FUNCTION__);
+//printk("### %s \n",__FUNCTION__);
 	trb_type = TRB_FIELD_TO_TYPE(le32_to_cpu(event->generic.field[3]));
 	xhci_dbg(xhci, "Vendor specific event TRB type = %u\n", trb_type);
 	if (trb_type == TRB_NEC_CMD_COMP && (xhci->quirks & XHCI_NEC_HOST))
@@ -2683,10 +2683,10 @@ static int xhci_handle_event(struct xhci_hcd *xhci)
 	int ret;
 
 	rmb();	/* yamano debug */
-printk("### %s \n",__FUNCTION__);
+//printk("### %s \n",__FUNCTION__);
 	if (!xhci->event_ring || !xhci->event_ring->dequeue) {
 		xhci->error_bitmask |= 1 << 1;
-printk("### %s sanity check error\n",__FUNCTION__);
+//printk("### %s sanity check error\n",__FUNCTION__);
 		return 0;
 	}
 
@@ -2695,7 +2695,7 @@ printk("### %s sanity check error\n",__FUNCTION__);
 	if ((le32_to_cpu(event->event_cmd.flags) & TRB_CYCLE) !=
 	    xhci->event_ring->cycle_state) {
 		xhci->error_bitmask |= 1 << 2;
-printk("### %s myself trb\n",__FUNCTION__);
+//printk("### %s myself trb\n",__FUNCTION__);
 		return 0;
 	}
 
@@ -2708,16 +2708,16 @@ printk("### %s myself trb\n",__FUNCTION__);
 	/* FIXME: Handle more event types. */
 	switch ((le32_to_cpu(event->event_cmd.flags) & TRB_TYPE_BITMASK)) {
 	case TRB_TYPE(TRB_COMPLETION):
-printk("### %s TRB_COMPLETE\n",__FUNCTION__,update_ptrs);
+//printk("### %s TRB_COMPLETE\n",__FUNCTION__,update_ptrs);
 		handle_cmd_completion(xhci, &event->event_cmd);
 		break;
 	case TRB_TYPE(TRB_PORT_STATUS):
-printk("### %s TRB_PORT_STATUS\n",__FUNCTION__,update_ptrs);
+//printk("### %s TRB_PORT_STATUS\n",__FUNCTION__,update_ptrs);
 		handle_port_status(xhci, event);
 		update_ptrs = 0;
 		break;
 	case TRB_TYPE(TRB_TRANSFER):
-printk("### %s TRB_TRANSFER\n",__FUNCTION__,update_ptrs);
+//printk("### %s TRB_TRANSFER\n",__FUNCTION__,update_ptrs);
 		ret = handle_tx_event(xhci, &event->trans_event);
 		if (ret < 0)
 			xhci->error_bitmask |= 1 << 9;
@@ -2725,11 +2725,11 @@ printk("### %s TRB_TRANSFER\n",__FUNCTION__,update_ptrs);
 			update_ptrs = 0;
 		break;
 	case TRB_TYPE(TRB_DEV_NOTE):
-printk("### %s TRB_TRB_DEV_NOTE\n",__FUNCTION__,update_ptrs);
+//printk("### %s TRB_TRB_DEV_NOTE\n",__FUNCTION__,update_ptrs);
 		handle_device_notification(xhci, event);
 		break;
 	default:
-printk("### %s TRB_DEFAULT\n",__FUNCTION__,update_ptrs);
+//printk("### %s TRB_DEFAULT\n",__FUNCTION__,update_ptrs);
 		if ((le32_to_cpu(event->event_cmd.flags) & TRB_TYPE_BITMASK) >=
 		    TRB_TYPE(48))
 			handle_vendor_event(xhci, event);
@@ -2745,7 +2745,7 @@ printk("### %s TRB_DEFAULT\n",__FUNCTION__,update_ptrs);
 		return 0;
 	}
 
-printk("### %s update_ptrs = %x\n",__FUNCTION__,update_ptrs);
+//printk("### %s update_ptrs = %x\n",__FUNCTION__,update_ptrs);
 	if (update_ptrs)
 		/* Update SW event ring dequeue pointer */
 		inc_deq(xhci, xhci->event_ring);
@@ -2768,29 +2768,29 @@ irqreturn_t xhci_irq(struct usb_hcd *hcd)
 	u64 temp_64;
 	union xhci_trb *event_ring_deq;
 	dma_addr_t deq;
-	ulong	flags;
-
-printk("#######xHCI Ireq\n");	/* yamano debug */
-//	spin_lock(&xhci->lock);
-	spin_lock_irqsave(&xhci->lock,flags);
+//	ulong	flags;
+rmb();	/* yamano debug */
+//printk("#######xHCI Ireq\n");	/* yamano debug */
+	spin_lock(&xhci->lock);
+//	spin_lock_irqsave(&xhci->lock,flags);
 	/* Check if the xHC generated the interrupt, or the irq is shared */
 	status = xhci_readl(xhci, &xhci->op_regs->status);
 	if (status == 0xffffffff)
 		goto hw_died;
 
 	if (!(status & STS_EINT)) {
-//		spin_unlock(&xhci->lock);
-		spin_unlock_irqrestore(&xhci->lock, flags);
-printk("#######xHCI Not Ireq!!!\n");	/* yamano debug */
+		spin_unlock(&xhci->lock);
+//		spin_unlock_irqrestore(&xhci->lock, flags);
+//printk("#######xHCI Not Ireq!!!\n");	/* yamano debug */
 		return IRQ_NONE;
 	}
 	if (status & STS_FATAL) {
 		xhci_warn(xhci, "WARNING: Host System Error\n");
 		xhci_halt(xhci);
 hw_died:
-//		spin_unlock(&xhci->lock);
-		spin_unlock_irqrestore(&xhci->lock, flags);
-printk("#######xHCI System Down\n");	/* yamano debug */
+		spin_unlock(&xhci->lock);
+//		spin_unlock_irqrestore(&xhci->lock, flags);
+//printk("#######xHCI System Down\n");	/* yamano debug */
 		return -ESHUTDOWN;
 	}
 
@@ -2821,14 +2821,14 @@ printk("#######xHCI System Down\n");	/* yamano debug */
 		temp_64 = xhci_read_64(xhci, &xhci->ir_set->erst_dequeue);
 		xhci_write_64(xhci, temp_64 | ERST_EHB,
 				&xhci->ir_set->erst_dequeue);
-//		spin_unlock(&xhci->lock);
-		spin_unlock_irqrestore(&xhci->lock, flags);
-printk("#######xHCI Ireq Device Dying!!!!\n");
+		spin_unlock(&xhci->lock);
+//		spin_unlock_irqrestore(&xhci->lock, flags);
+//printk("#######xHCI Ireq Device Dying!!!!\n");
 
 		return IRQ_HANDLED;
 	}
 
-printk("#######xHCI Ireq execute cmd\n");
+//printk("#######xHCI Ireq execute cmd\n");
 //	spin_lock(&xhci->lock);
 	event_ring_deq = xhci->event_ring->dequeue;
 	/* FIXME this should be a delayed service routine
@@ -2837,7 +2837,7 @@ printk("#######xHCI Ireq execute cmd\n");
 	while (xhci_handle_event(xhci) > 0) {}
 //	spin_unlock(&xhci->lock);
 
-printk("#######xHCI Ireq finish execute cmd\n");
+//printk("#######xHCI Ireq finish execute cmd\n");
 	temp_64 = xhci_read_64(xhci, &xhci->ir_set->erst_dequeue);
 	/* If necessary, update the HW's version of the event ring deq ptr. */
 	if (event_ring_deq != xhci->event_ring->dequeue) {
@@ -2855,8 +2855,8 @@ printk("#######xHCI Ireq finish execute cmd\n");
 	temp_64 |= ERST_EHB;
 	xhci_write_64(xhci, temp_64, &xhci->ir_set->erst_dequeue);
 
-//	spin_unlock(&xhci->lock);
-	spin_unlock_irqrestore(&xhci->lock, flags);
+	spin_unlock(&xhci->lock);
+//	spin_unlock_irqrestore(&xhci->lock, flags);
 
 	return IRQ_HANDLED;
 }
@@ -2880,7 +2880,7 @@ static void queue_trb(struct xhci_hcd *xhci, struct xhci_ring *ring,
 		u32 field1, u32 field2, u32 field3, u32 field4)
 {
 	struct xhci_generic_trb *trb;
-printk("##### %s \n",__FUNCTION__);
+//printk("##### %s \n",__FUNCTION__);
 	trb = &ring->enqueue->generic;
 	trb->field[0] = cpu_to_le32(field1);
 	trb->field[1] = cpu_to_le32(field2);
@@ -4041,7 +4041,7 @@ static int queue_set_tr_deq(struct xhci_hcd *xhci, int slot_id,
 	u32 type = TRB_TYPE(TRB_SET_DEQ);
 	struct xhci_virt_ep *ep;
 
-printk("### %s dequeue \n",__FUNCTION__);	/* yamano */
+//printk("### %s dequeue \n",__FUNCTION__);	/* yamano */
 	addr = xhci_trb_virt_to_dma(deq_seg, deq_ptr);
 	if (addr == 0) {
 		xhci_warn(xhci, "WARN Cannot submit Set TR Deq Ptr\n");
diff --git a/drivers/usb/host/xhci.c b/drivers/usb/host/xhci.c
index 3ef3a70..cef0b05 100644
--- a/drivers/usb/host/xhci.c
+++ b/drivers/usb/host/xhci.c
@@ -3360,7 +3360,7 @@ int xhci_discover_or_reset_device(struct usb_hcd *hcd, struct usb_device *udev)
 	struct xhci_slot_ctx *slot_ctx;
 	int old_active_eps = 0;
 
-printk("## %s entry\n",__FUNCTION__);	/* yamano */
+//printk("## %s entry\n",__FUNCTION__);	/* yamano */
 	ret = xhci_check_args(hcd, udev, NULL, 0, false, __func__);
 	if (ret <= 0)
 		return ret;
@@ -3608,7 +3608,9 @@ int xhci_alloc_dev(struct usb_hcd *hcd, struct usb_device *udev)
 	int timeleft;
 	int ret;
 	union xhci_trb *cmd_trb;
-printk("## %s entry\n",__FUNCTION__);	/* yamano */
+
+	msleep(1000);
+//printk("## %s entry\n",__FUNCTION__);	/* yamano */
 	spin_lock_irqsave(&xhci->lock, flags);
 //	spin_lock(&xhci->lock);
 	cmd_trb = xhci_find_next_enqueue(xhci->cmd_ring);
@@ -3623,11 +3625,11 @@ printk("## %s entry\n",__FUNCTION__);	/* yamano */
 	spin_unlock_irqrestore(&xhci->lock, flags);
 //	spin_unlock(&xhci->lock);
 
-printk("## %s wait completion\n",__FUNCTION__);	/* yamano */
+//printk("## %s wait completion\n",__FUNCTION__);	/* yamano */
 	/* XXX: how much time for xHC slot assignment? */
 	timeleft = wait_for_completion_interruptible_timeout(&xhci->addr_dev,
 			XHCI_CMD_DEFAULT_TIMEOUT);
-printk("## %s wait exit\n",__FUNCTION__);	/* yamano */
+//printk("## %s wait exit\n",__FUNCTION__);	/* yamano */
 	if (timeleft <= 0) {
 		xhci_warn(xhci, "%s while waiting for a slot\n",
 				timeleft == 0 ? "Timeout" : "Signal");
@@ -3640,7 +3642,7 @@ printk("## %s wait exit\n",__FUNCTION__);	/* yamano */
 		return 0;
 	}
 
-printk("## %s completion next step\n",__FUNCTION__);	/* yamano */
+//printk("## %s completion next step\n",__FUNCTION__);	/* yamano */
 	if ((xhci->quirks & XHCI_EP_LIMIT_QUIRK)) {
 		spin_lock_irqsave(&xhci->lock, flags);
 //		spin_lock(&xhci->lock);
-- 
1.7.1

