From 0c0fc8b9937d1cca8fc123e89865068b9b34c8f6 Mon Sep 17 00:00:00 2001
From: jthomas <jacob.thomas@windriver.com>
Date: Wed, 11 May 2016 11:34:34 +0900
Subject: [PATCH 075/170] 0001-correct-rtc-alram-issue


diff --git a/drivers/rtc/rtc-quatro53xx.c b/drivers/rtc/rtc-quatro53xx.c
index b925685..ca7ced9 100644
--- a/drivers/rtc/rtc-quatro53xx.c
+++ b/drivers/rtc/rtc-quatro53xx.c
@@ -76,6 +76,7 @@ struct	lm2_rtc	{
 	unsigned long		alm_en;
 	unsigned long		alm_sec;
 	int			tim_en;
+	struct work_struct 	irqwork;
 };
 
 /*
@@ -324,7 +325,7 @@ static	irqreturn_t	lm2_timer_irq_handler(int irq, void *ptr)
 
 	if(rtc->alm_en){
 		if(current >= rtc->alm_sec ){
-			rtc_update_irq(rtc, 1, RTC_AF | RTC_IRQF);
+			rtc_update_irq(rtc->rtc, 1, RTC_AF | RTC_IRQF);
 		}
 	}
 
@@ -335,7 +336,7 @@ static	int	lm2_read_alarm(struct device *dev, struct rtc_wkalrm *alm)
 {
 	struct lm2_rtc *rtc = dev_get_drvdata(dev);
 
-	dev_info(dev, "lm2_set_alarm call\n");
+	dev_info(dev, "lm2_read_alarm call\n");
 	rtc_time_to_tm(rtc->alm_sec, &alm->time);
 
 	return	0;
@@ -345,11 +346,25 @@ static	int	lm2_set_alarm(struct device *dev, struct rtc_wkalrm *alm)
 {
 	struct lm2_rtc *rtc = dev_get_drvdata(dev);
 	unsigned long	time;
+	u32	current_sec;
+	int	result;
 
 	dev_info(dev, "lm2_set_alarm call %lx \n", alm->time);
 	rtc_tm_to_time(&alm->time, &time);
 	rtc->alm_sec = time;
-	return	0;
+	result = rtc_busy(rtc->rtc_base);
+	if(result != 0){
+		printk(KERN_ERR "No responce Watch Dog Timer\n");
+		return	-1;
+	}
+	
+	current_sec = readl(rtc->rtc_base + RTCCNT);
+	if( current_sec < time ){
+		schedule_work(&rtc->irqwork);
+		return 0;
+	}else{
+		return	-ETIME;
+	}
 }
 
 static	int	lm2_alarm_enable(struct device *dev, unsigned int enable)
@@ -359,19 +374,46 @@ static	int	lm2_alarm_enable(struct device *dev, unsigned int enable)
 	dev_info(dev, "lm2_alarm_enable call % d\n", enable);
 	dev_info(dev, "lm2_alarm tim_en %d\n",rtc->tim_en);
 	if(enable == 1){
-		if(request_irq(rtc->irq, lm2_timer_irq_handler, 0, "lm2_rtc", dev)){
-			return	-EINVAL;
-		}
+		//if(request_irq(rtc->irq, lm2_timer_irq_handler, 0, "lm2_rtc", rtc)){
+		//	return	-EINVAL;
+		//}
 		rtc->alm_en = 1;
 		rtc->tim_en = 1;
 	}else{
 		if(rtc->tim_en == 0)	return	0;
-		free_irq(rtc->irq,dev);
+		//free_irq(rtc->irq,dev);
 		rtc->alm_en = 0;
 	}
 	return	0;
 }
 
+//extern unsigned long volatile __jiffy_data  jiffies;
+void lm2_timer_do_work(struct work_struct *work)
+{
+	u32	current_sec;
+	int result, period;
+
+	struct lm2_rtc *rtc =
+	container_of(work, struct lm2_rtc, irqwork);
+	result = rtc_busy(rtc->rtc_base);
+	if(result != 0){
+		printk(KERN_ERR "No responce Watch Dog Timer\n");
+		return	-1;
+	}
+	
+	current_sec = readl(rtc->rtc_base + RTCCNT);
+	//printk("rtc->alm_sec:%d\n", rtc->alm_sec);
+	//printk("current_sec:%d\n", current_sec);
+	if( rtc->alm_sec > current_sec ){
+		period = (rtc->alm_sec - current_sec) * 1000;
+		//printk("jiffies before:%d period:%d\n", jiffies, period);
+		msleep(period);
+		//printk("jiffies after :%d\n", jiffies);
+	}
+	rtc_update_irq(rtc->rtc, 1, RTC_AF | RTC_IRQF);
+	//printk("lm2_timer_do_work done\n");
+}
+
 const static struct of_device_id rtc_of_match[] __initconst = {
 	{ .compatible = "waikiki,lm2-rtc", },
 	{ },
@@ -423,6 +465,7 @@ static int __init lm2_rtc_probe(struct platform_device *pdev)
 		dev_err(&pdev->dev, " Could not get IRQ resource\n");
 		return	-ENOMEM;
 	}	
+	INIT_WORK(&dev->irqwork, lm2_timer_do_work);
 
 	mutex_init(&dev->lock);
 
@@ -433,6 +476,7 @@ static int __init lm2_rtc_probe(struct platform_device *pdev)
 	platform_set_drvdata(pdev,dev);
 
 	dev->rtc = rtc_device_register("lm2-rtc", &pdev->dev, &lm2_rtc_ops, THIS_MODULE);
+	dev->rtc->uie_unsupported = 1;
 
 	device_init_wakeup(&pdev->dev, 1);
 	/*
-- 
1.7.1

