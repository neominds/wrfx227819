From 0b35aa4e1ad545470fe794c2626e66f59e69ec1e Mon Sep 17 00:00:00 2001
From: jthomas <jacob.thomas@windriver.com>
Date: Wed, 11 May 2016 11:35:15 +0900
Subject: [PATCH 105/170] 0001-usb3-gadget-temporary-update


diff --git a/drivers/usb/dwc3/core.c b/drivers/usb/dwc3/core.c
index 5a594e6..9d8eb20 100644
--- a/drivers/usb/dwc3/core.c
+++ b/drivers/usb/dwc3/core.c
@@ -412,7 +412,11 @@ dev_err(dwc->dev, "dwc3_core_init entry\n");
 
 dev_err(dwc->dev, "prepare soft reset\n");
 	/* issue device SoftReset too */
+#if	1	/*	<HN>	*/
+	timeout = jiffies + msecs_to_jiffies(500)*5;
+#else	/*	Original	*/
 	timeout = jiffies + msecs_to_jiffies(500*3);
+#endif
 	dwc3_writel(dwc->regs, DWC3_DCTL, DWC3_DCTL_CSFTRST);
 	do {
 		reg = dwc3_readl(dwc->regs, DWC3_DCTL);
@@ -486,8 +490,9 @@ dev_err(dwc->dev, "dwc3_alloc_scratch_buffer\n");
 	ret = dwc3_alloc_scratch_buffers(dwc);
 	if (ret)
 		goto err1;
-
-dev_err(dwc->dev, "dwc3_setup_scratch_buffers\n");
+#if	1 /*<HN>*/
+dev_err(dwc->dev, "dwc3_setup_scratch_buffers. Rev=%xH <HN>\n",dwc->revision);
+#endif
 	ret = dwc3_setup_scratch_buffers(dwc);
 	if (ret)
 		goto err2;
diff --git a/drivers/usb/dwc3/ep0.c b/drivers/usb/dwc3/ep0.c
index 0384dfc..0fd297d 100644
--- a/drivers/usb/dwc3/ep0.c
+++ b/drivers/usb/dwc3/ep0.c
@@ -1044,6 +1044,10 @@ static void dwc3_ep0_xfernotready(struct dwc3 *dwc,
 		}
 
 		dwc3_ep0_do_control_status(dwc, event);
+		break;
+	default:
+		dev_dbg(dwc->dev, "<<<DEPEVT_STATUS_CONTROL_XXXX(%xH)  <HN> >>>\n",event->status);
+		break;
 	}
 }
 
@@ -1071,5 +1075,8 @@ void dwc3_ep0_interrupt(struct dwc3 *dwc,
 	case DWC3_DEPEVT_STREAMEVT:
 	case DWC3_DEPEVT_EPCMDCMPLT:
 		break;
+	default:
+		dev_dbg(dwc->dev, "<<<SHOULDN'T BE HERE <HN> >>>\n");
+		break;
 	}
 }
diff --git a/drivers/usb/dwc3/gadget.c b/drivers/usb/dwc3/gadget.c
index 3b9554c..e04fda0 100644
--- a/drivers/usb/dwc3/gadget.c
+++ b/drivers/usb/dwc3/gadget.c
@@ -67,6 +67,9 @@
 #define USB3_PHY_CR_ACK           0x04400214
 #define USB3_PHY_CR_DATA_OUT      0x04400218
 
+#undef	HNDEBUG		/*DEBUG for HN*/
+#define	HNDEBUG	1	/*DEBUG for HN*/
+
 volatile u8	__iomem	*cr_cap_addr;
 volatile u8	__iomem	*cr_cap_data;
 volatile u8	__iomem	*cr_data_in;
@@ -162,7 +165,7 @@ static void phy_dp_pull_up(u8 on, u8 weak)
 		break;
 	}
 }
-#endif
+#endif	/* WORKAROUDN_55XXA0_DP_ISSUE*/
 
 /**
  * dwc3_gadget_set_test_mode - Enables USB2 Test Modes
@@ -226,6 +229,9 @@ int dwc3_gadget_set_link_state(struct dwc3 *dwc, enum dwc3_link_state state)
 	int		retries = 10000;
 	u32		reg;
 
+#if	0	/*<HN>*/
+	dev_vdbg(dwc->dev, "%s <HN>\n",__FUNCTION__);
+#endif
 	/*
 	 * Wait until device controller is ready. Only applies to 1.94a and
 	 * later RTL.
@@ -303,7 +309,11 @@ int dwc3_gadget_resize_tx_fifos(struct dwc3 *dwc)
 	int		fifo_size;
 	int		mdwidth;
 	int		num;
-//printk(KERN_ERR "# %s entry\n",__FUNCTION__);
+#if	1	/*<HN>*/
+	dev_vdbg(dwc->dev, "%s <HN>\n",__FUNCTION__);
+#endif
+
+	//printk(KERN_ERR "# %s entry\n",__FUNCTION__);
 	if (!dwc->needs_fifo_resize)
 		return 0;
 
@@ -367,6 +377,9 @@ void dwc3_gadget_giveback(struct dwc3_ep *dep, struct dwc3_request *req,
 {
 	struct dwc3			*dwc = dep->dwc;
 	int				i;
+#if	0	/*<HN>*/
+	dev_vdbg(dwc->dev, "%s <HN> Q=%d\n",__FUNCTION__,req->queued);
+#endif
 
 	if (req->queued) {
 		i = 0;
@@ -399,7 +412,24 @@ void dwc3_gadget_giveback(struct dwc3_ep *dep, struct dwc3_request *req,
 	dev_dbg(dwc->dev, "request %p from %s completed %d/%d ===> %d\n",
 			req, dep->name, req->request.actual,
 			req->request.length, status);
-
+#ifdef	HNDEBUG /*<HN>*/
+	if (status < 0) {
+		switch (status) {
+		case -EINPROGRESS:
+			dev_dbg(dwc->dev, "Status: EINPROGRESS\n");
+			break;
+		case -ESHUTDOWN:
+			dev_dbg(dwc->dev, "Status: Cannot send after transport endpoint shutdown\n");
+			break;
+		case -ETIMEDOUT:
+			dev_dbg(dwc->dev, "Status: Connection timed out\n");
+			break;
+		default:
+			dev_dbg(dwc->dev, "Status: Others=%0xH\n",status);
+			break;
+		}
+	}
+#endif
 	spin_unlock(&dwc->lock);
 	req->request.complete(&dep->endpoint, &req->request);
 	spin_lock(&dwc->lock);
@@ -504,8 +534,13 @@ int dwc3_send_gadget_generic_command(struct dwc3 *dwc, int cmd, u32 param)
 	do {
 		reg = dwc3_readl(dwc->regs, DWC3_DGCMD);
 		if (!(reg & DWC3_DGCMD_CMDACT)) {
+#ifdef	HNDEBUG /*<HN>*/
+			dev_vdbg(dwc->dev, "G-Command Complete --> %d\n",
+					DWC3_DGCMD_STATUS(reg));
+#else
 			dev_vdbg(dwc->dev, "Command Complete --> %d\n",
 					DWC3_DGCMD_STATUS(reg));
+#endif
 			return 0;
 		}
 
@@ -527,16 +562,20 @@ int dwc3_send_gadget_ep_cmd(struct dwc3 *dwc, unsigned ep,
 	u32			timeout = 500;
 	u32			reg;
 
+/*	unsigned long			flags;*/
+
 	dev_vdbg(dwc->dev, "%s: cmd '%s' params %08x %08x %08x\n",
 			dep->name,
 			dwc3_gadget_ep_cmd_string(cmd), params->param0,
 			params->param1, params->param2);
 
+/*	spin_lock_irqsave(&dwc->lock, flags);	NO-GOOD *//* added 0305 <HN>*/
 	dwc3_writel(dwc->regs, DWC3_DEPCMDPAR0(ep), params->param0);
 	dwc3_writel(dwc->regs, DWC3_DEPCMDPAR1(ep), params->param1);
 	dwc3_writel(dwc->regs, DWC3_DEPCMDPAR2(ep), params->param2);
 
 	dwc3_writel(dwc->regs, DWC3_DEPCMD(ep), cmd | DWC3_DEPCMD_CMDACT);
+/*	spin_unlock_irqrestore(&dwc->lock, flags);	NO-GOOD *//* added 0305 <HN>*/
 	do {
 		reg = dwc3_readl(dwc->regs, DWC3_DEPCMD(ep));
 		if (!(reg & DWC3_DEPCMD_CMDACT)) {
@@ -555,6 +594,9 @@ int dwc3_send_gadget_ep_cmd(struct dwc3 *dwc, unsigned ep,
 
 		udelay(1);
 	} while (1);
+	/*Added for debug should not reach here.<HN>*/
+	dev_vdbg(dwc->dev, "Command Complete ???--> %d <HN>\n",DWC3_DEPCMD_STATUS(reg));
+	return 0;
 }
 
 static dma_addr_t dwc3_trb_dma_offset(struct dwc3_ep *dep,
@@ -603,6 +645,9 @@ static int dwc3_gadget_start_config(struct dwc3 *dwc, struct dwc3_ep *dep)
 	struct dwc3_gadget_ep_cmd_params params;
 	u32			cmd;
 
+#if	0	/*<HN>*/
+	dev_vdbg(dwc->dev, "%s <HN>\n",__FUNCTION__);
+#endif
 	memset(&params, 0x00, sizeof(params));
 
 	if (dep->number != 1) {
@@ -842,6 +887,7 @@ static int dwc3_gadget_ep_enable(struct usb_ep *ep,
 
 	if (!ep || !desc || desc->bDescriptorType != USB_DT_ENDPOINT) {
 		pr_debug("dwc3: invalid parameters\n");
+/*		printk("dwc3: invalid parameters\n");*/
 		return -EINVAL;
 	}
 
@@ -869,13 +915,17 @@ static int dwc3_gadget_ep_enable(struct usb_ep *ep,
 	case USB_ENDPOINT_XFER_BULK:
 		strlcat(dep->name, "-bulk", sizeof(dep->name));
 		break;
-	case USB_ENDPOINT_XFER_INT:
+	case USB_ENDPOINT_XFER_INT: /*<HN> Interrupt Transfer	*/
 		strlcat(dep->name, "-int", sizeof(dep->name));
 		break;
 	default:
 		dev_err(dwc->dev, "invalid endpoint transfer type\n");
 	}
 
+#ifdef	HNDEBUG /*<HN>*/
+    dev_vdbg(dwc->dev, "dwc3_gadget_ep_enable-2 Type=%xH Name=%s\n", usb_endpoint_type(desc),dep->name);
+#endif
+
 	spin_lock_irqsave(&dwc->lock, flags);
 	ret = __dwc3_gadget_ep_enable(dep, desc, ep->comp_desc, false, false);
 	spin_unlock_irqrestore(&dwc->lock, flags);
@@ -1000,7 +1050,7 @@ static void dwc3_prepare_one_trb(struct dwc3_ep *dep,
 		 * This is only possible with faulty memory because we
 		 * checked it already :)
 		 */
-		dev_err(dwc->dev, "!!! BUG  !!! HN\n");
+		dev_err(dwc->dev, "!!! BUG  !!! <HN>\n");
 		BUG();
 	}
 
@@ -1087,8 +1137,8 @@ static void dwc3_prepare_trbs(struct dwc3_ep *dep, bool starting)
 	list_for_each_entry_safe(req, n, &dep->request_list, list) {
 		unsigned	length;
 		dma_addr_t	dma;
-//		last_one = false;
-		last_one = true;	/* yamano 0219 added from refer source */
+		last_one = false;	/*	Back Original	<HN> 2015-03-05 */
+/*		last_one = true;	*//* yamano 0219 added from refer source */
 
 		if (req->request.num_mapped_sgs > 0) {
 			struct usb_request *request = &req->request;
@@ -1153,6 +1203,9 @@ static int __dwc3_gadget_kick_transfer(struct dwc3_ep *dep, u16 cmd_param,
 	int				ret;
 	u32				cmd;
 
+#if	0	/*<HN>*/
+	dev_vdbg(dwc->dev, "%s with %d<HN>\n",__FUNCTION__,start_new);
+#endif
 	if (start_new && (dep->flags & DWC3_EP_BUSY)) {
 		dev_vdbg(dwc->dev, "%s: endpoint busy\n", dep->name);
 		return -EBUSY;
@@ -1177,11 +1230,6 @@ static int __dwc3_gadget_kick_transfer(struct dwc3_ep *dep, u16 cmd_param,
 		 */
 		req = next_request(&dep->req_queued);
 	}
-#if	0	/* HN NG*/
-	if (dwc->gadget.speed == USB_SPEED_SUPER) {
-		dwc3_gadget_suspend(dwc);
-	}	
-#endif
 	if (!req) {
 		dep->flags |= DWC3_EP_PENDING_REQUEST;
 		return 0;
@@ -1198,7 +1246,9 @@ static int __dwc3_gadget_kick_transfer(struct dwc3_ep *dep, u16 cmd_param,
 	}
 
 	cmd |= DWC3_DEPCMD_PARAM(cmd_param);
+
 	ret = dwc3_send_gadget_ep_cmd(dwc, dep->number, cmd, &params);
+
 	if (ret < 0) {
 		dev_dbg(dwc->dev, "failed to send STARTTRANSFER command\n");
 
@@ -1221,6 +1271,8 @@ static int __dwc3_gadget_kick_transfer(struct dwc3_ep *dep, u16 cmd_param,
 		WARN_ON_ONCE(!dep->resource_index);
 	}
 
+	udelay(5);	/*<HN> Try to sync 0306	*/
+
 	return 0;
 }
 
@@ -1263,6 +1315,10 @@ static int __dwc3_gadget_ep_queue(struct dwc3_ep *dep, struct dwc3_request *req)
 	req->direction		= dep->direction;
 	req->epnum		= dep->number;
 
+#if	0	/*<HN>*/
+	dev_vdbg(dwc->dev, "%s <HN>\n",__FUNCTION__);
+#endif
+
 	/*
 	 * We only add to our list of requests now and
 	 * start consuming the list once we get XferNotReady
@@ -1558,6 +1614,9 @@ static int dwc3_gadget_wakeup(struct usb_gadget *g)
 	u8			link_state;
 	u8			speed;
 
+#if	0	/*<HN>*/
+	dev_vdbg(dwc->dev, "%s <HN>\n",__FUNCTION__);
+#endif
 	spin_lock_irqsave(&dwc->lock, flags);
 
 	/*
@@ -1604,7 +1663,7 @@ static int dwc3_gadget_wakeup(struct usb_gadget *g)
 
 	/* poll until Link State changes to ON */
 /*	timeout = jiffies + msecs_to_jiffies(100);*/
-	timeout = jiffies + msecs_to_jiffies(100)*5;/* HN added *5*/
+	timeout = jiffies + msecs_to_jiffies(100)*5;/* <HN> added *4*/
 
 	while (!time_after(jiffies, timeout)) {
 		reg = dwc3_readl(dwc->regs, DWC3_DSTS);
@@ -1643,6 +1702,9 @@ static int dwc3_gadget_run_stop(struct dwc3 *dwc, int is_on, int suspend)
 	u32			reg;
 	u32			timeout = 500;
 
+#if	0	/*<HN>*/
+	dev_vdbg(dwc->dev, "%s <HN>\n",__FUNCTION__);
+#endif
 	reg = dwc3_readl(dwc->regs, DWC3_DCTL);
 	if (is_on) {
 		if (dwc->revision <= DWC3_REVISION_187A) {
@@ -1884,6 +1946,9 @@ static int dwc3_gadget_stop(struct usb_gadget *g,
 	unsigned long		flags;
 	int			irq;
 
+#if	0	/*<HN>*/
+	printk(KERN_ERR "%s <HN>\n",__FUNCTION__);
+#endif
 	spin_lock_irqsave(&dwc->lock, flags);
 
 	dwc3_gadget_disable_irq(dwc);
@@ -2024,7 +2089,9 @@ static int __dwc3_cleanup_done_trbs(struct dwc3 *dwc, struct dwc3_ep *dep,
 	unsigned int		s_pkt = 0;
 	unsigned int		trb_status;
 
-//printk(KERN_ERR "%s entry\n",__FUNCTION__);
+#if	0	/*Too Much <HN> */
+	printk(KERN_ERR "%s <HN>\n",__FUNCTION__);
+#endif
 	if ((trb->ctrl & DWC3_TRB_CTRL_HWO) && status != -ESHUTDOWN)
 		/*
 		 * We continue despite the error. There is not much we
@@ -2102,7 +2169,9 @@ static int dwc3_cleanup_done_reqs(struct dwc3 *dwc, struct dwc3_ep *dep,
 	unsigned int		i;
 	int			ret;
 
-//printk(KERN_ERR "%s entry\n",__FUNCTION__);
+#if	0	/*Too Much <<HN>*/
+	printk(KERN_ERR "%s <HN>\n",__FUNCTION__);
+#endif
 	do {
 		req = next_request(&dep->req_queued);
 		if (!req) {
@@ -2157,7 +2226,9 @@ static void dwc3_endpoint_transfer_complete(struct dwc3 *dwc,
 	unsigned		status = 0;
 	int			clean_busy;
 
-//printk(KERN_ERR "%s entry\n",__FUNCTION__);
+#if	0	/*Too Much <HN>*/
+	printk(KERN_ERR "%s <HN>\n",__FUNCTION__);
+#endif
 	if (event->status & DEPEVT_STATUS_BUSERR)
 		status = -ECONNRESET;
 
@@ -2270,6 +2341,7 @@ static void dwc3_endpoint_interrupt(struct dwc3 *dwc,
 			/* FALLTHROUGH */
 		default:
 			dev_dbg(dwc->dev, "Couldn't find suitable stream\n");
+			break;/* <HN> */
 		}
 		break;
 	case DWC3_DEPEVT_RXTXFIFOEVT:
@@ -2281,7 +2353,7 @@ static void dwc3_endpoint_interrupt(struct dwc3 *dwc,
 		dev_dbg(dwc->dev, "Endpoint Command Complete\n");
 		break;
 	default:
-		dev_dbg(dwc->dev, "Unknown Endpoint Command %xH HN\n",event->endpoint_event);
+		dev_dbg(dwc->dev, "Unknown Endpoint Command %xH <HN>\n",event->endpoint_event);
 		break;
 	}
 }
@@ -2354,7 +2426,11 @@ static void dwc3_stop_active_transfer(struct dwc3 *dwc, u32 epnum, bool force)
 	WARN_ON_ONCE(ret);
 	dep->resource_index = 0;
 	dep->flags &= ~DWC3_EP_BUSY;
+#if	1	/*	<HN>	*/
+	udelay(1000);
+#else	/*Original*/
 	udelay(100);
+#endif
 }
 
 static void dwc3_stop_active_transfers(struct dwc3 *dwc)
@@ -2574,7 +2650,7 @@ static void dwc3_gadget_conndone_interrupt(struct dwc3 *dwc)
 		dwc->gadget.speed = USB_SPEED_LOW;
 		break;
 	default:
-		dev_vdbg(dwc->dev, "??? SPEED UNKNOW ???HN\n");
+		dev_vdbg(dwc->dev, "??? SPEED UNKNOW ??? <HN>\n");
 		break;
 	}
 
@@ -2625,6 +2701,10 @@ static void dwc3_gadget_conndone_interrupt(struct dwc3 *dwc)
 	 *
 	 * In both cases reset values should be sufficient.
 	 */
+#ifdef	HNDEBUG		/* <HN> */
+	dev_vdbg(dwc->dev, "Connn:=PSize=%d Speed=%d\n",
+		dwc3_gadget_ep0_desc.wMaxPacketSize,dwc->gadget.speed = USB_SPEED_SUPER);
+#endif
 }
 
 static void dwc3_gadget_wakeup_interrupt(struct dwc3 *dwc)
@@ -2644,6 +2724,9 @@ static void dwc3_gadget_linksts_change_interrupt(struct dwc3 *dwc,
 {
 	enum dwc3_link_state	next = evtinfo & DWC3_LINK_STATE_MASK;
 	unsigned int		pwropt;
+#if	1	/* <HN> */
+	unsigned int		act_flag=0;
+#endif	/* <HN> */
 
 //printk(KERN_ERR "%s entry next = %x\n",__FUNCTION__,next);
 	/*
@@ -2718,6 +2801,7 @@ static void dwc3_gadget_linksts_change_interrupt(struct dwc3 *dwc,
 				break;
 			}
 		}
+		dev_vdbg(dwc->dev, "ASSUMED OLD CHIP W.A. <HN>\n");
 	}
 
 #if WORKAROUDN_55XXA0_DP_ISSUE
@@ -2729,50 +2813,88 @@ static void dwc3_gadget_linksts_change_interrupt(struct dwc3 *dwc,
 //printk(KERN_ERR "%s 55xx unkonwn phy_dp_pull_up 1,1\n",__FUNCTION__);			
 			/* 55XX A0 D+ workaround */
 			phy_dp_pull_up(1, 1);
+			act_flag |= 0x0001; /*<HN>*/
 		}
 	}
 	if (next == DWC3_LINK_STATE_SS_DIS) {
 		/* 55XX A0 D+ workaround */
 //printk(KERN_ERR "%s 55xx DWC3_LINK_STATE_SS_DIS phy_dp_pull_up 1,1\n",__FUNCTION__);			
 		phy_dp_pull_up(1, 1);
+		act_flag |= 0x0002; /*<HN>*/
 	}
 	if ((dwc->gadget.speed == USB_SPEED_FULL) &&
 		(next == DWC3_LINK_STATE_U0)) {
 //printk(KERN_ERR "%s 55xx DWC3_LINK_STATE_U0 phy_dp_pull_up 1,1\n",__FUNCTION__);			
 		/* 55XX A0 D+ workaround */
 		phy_dp_pull_up(1, 1);
+		act_flag |= 0x0004; /*<HN>*/
 	}
 	if((dwc->gadget.speed == USB_SPEED_SUPER) && (next == DWC3_LINK_STATE_U0)){
-		phy_dp_pull_up(1, 1);	/* yamano */
+		phy_dp_pull_up(1, 1);	/* yamano's back 0305 */
+		act_flag |= 0x0008; /*<HN>*/
 	}
 #endif
 
 
 	switch (next) {
 	case DWC3_LINK_STATE_U1:
-/*		if (dwc->speed == USB_SPEED_SUPER)*/
-		if (dwc->speed == USB_SPEED_UNKNOWN && dwc->gadget.speed == USB_SPEED_SUPER)
+		if (dwc->speed == USB_SPEED_SUPER) {
 			dwc3_suspend_gadget(dwc);
+			act_flag |= 0x0010; /*<HN>*/
+		}
 		break;
 	case DWC3_LINK_STATE_U2:
 	case DWC3_LINK_STATE_U3:
 		dwc3_suspend_gadget(dwc);
+		act_flag |= 0x0020; /*<HN>*/
+		if (dwc->gadget.speed != USB_SPEED_SUPER) {	/* 2015-03-05 <HN> */
+			phy_dp_pull_up(1, 1);
+			act_flag |= 0x0400; /*<HN>*/
+		}
 		break;
 	case DWC3_LINK_STATE_RESUME:
 		dwc3_resume_gadget(dwc);
+		act_flag |= 0x0040; /*<HN>*/
 		break;
 	case DWC3_LINK_STATE_U0:
-		if (dwc->link_state == DWC3_LINK_STATE_POLL && dwc->speed == USB_SPEED_UNKNOWN && dwc->gadget.speed == USB_SPEED_SUPER)
+		if ( dwc->speed == USB_SPEED_UNKNOWN && dwc->gadget.speed == USB_SPEED_SUPER) {
+			if (dwc->link_state == DWC3_LINK_STATE_POLL) {
+				dwc3_suspend_gadget(dwc); /*If this issue, state-change will be stopped */
+				act_flag |= 0x0080; /*<HN>*/
+			}
+		}
+#if	1	/*<HN>*/
+		break;
+	case DWC3_LINK_STATE_POLL :
+			dwc3_suspend_gadget(dwc); /*If this issue, state-change will be stopped */
+/*			dwc3_resume_gadget(dwc);*/
+			act_flag |= 0x0100; /*<HN>*/
+#endif
+		break;
+	case DWC3_LINK_STATE_RX_DET:	/* 2015-03-04 <HN> */
+		if(dwc->gadget.speed != USB_SPEED_SUPER){
+/*			phy_dp_pull_up(1, 1);*/
 			dwc3_suspend_gadget(dwc);
+			act_flag |= 0x0200; 
+		}
+		break;
 	default:
 		/* do nothing */
+		dev_vdbg(dwc->dev, "Do Nothing <HN>\n");	/*	<HN>	*/
 		break;
 	}
 
 //	printk(KERN_ERR "link change: %s [%d] -> %s [%d]\n",
+#ifdef	HNDEBUG		/* <HN> */
+	dev_vdbg(dwc->dev, "link change: %s [%d] -> %s [%d] Act=%xH\n",
+			dwc3_gadget_link_string(dwc->link_state),
+			dwc->link_state, dwc3_gadget_link_string(next), next,act_flag);
+	
+#else
 	dev_vdbg(dwc->dev, "link change: %s [%d] -> %s [%d]\n",
 			dwc3_gadget_link_string(dwc->link_state),
 			dwc->link_state, dwc3_gadget_link_string(next), next);
+#endif	/*<HN>*/
 
 	dwc->link_state = next;
 }
diff --git a/drivers/usb/dwc3/gadget.h b/drivers/usb/dwc3/gadget.h
index f26523d..6b1085b 100644
--- a/drivers/usb/dwc3/gadget.h
+++ b/drivers/usb/dwc3/gadget.h
@@ -166,6 +166,8 @@ static inline const char *dwc3_gadget_event_string(u8 event)
 		return "Command Complete";
 	case DWC3_DEVICE_EVENT_OVERFLOW:
 		return "Overflow";
+	default:
+		return "DWC3_DEVICE_UNKNOWN <HN>";
 	}
 
 	return "UNKNOWN";
@@ -190,6 +192,8 @@ static inline const char *dwc3_ep_event_string(u8 event)
 		return "Stream";
 	case DWC3_DEPEVT_EPCMDCMPLT:
 		return "Endpoint Command Complete";
+	default:
+		return "DEPVENT_UNKNOWN <HN>";
 	}
 
 	return "UNKNOWN";
diff --git a/drivers/usb/gadget/composite.c b/drivers/usb/gadget/composite.c
index 44a292b..0230968 100644
--- a/drivers/usb/gadget/composite.c
+++ b/drivers/usb/gadget/composite.c
@@ -21,6 +21,7 @@
 #include <linux/usb/composite.h>
 #include <asm/unaligned.h>
 
+
 /*
  * The code in this file is utility code, used to build a gadget driver
  * from one or more "function" drivers, one or more "configuration"
@@ -604,7 +605,6 @@ static int set_config(struct usb_composite_dev *cdev,
 	int			result = -EINVAL;
 	unsigned		power = gadget_is_otg(gadget) ? 8 : 100;
 	int			tmp;
-
 	if (number) {
 		list_for_each_entry(c, &cdev->configs, list) {
 			if (c->bConfigurationValue == number) {
-- 
1.7.1

