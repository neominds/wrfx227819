From d260fd7c3b1a044b72300a8e0a07cec0182ed213 Mon Sep 17 00:00:00 2001
From: jthomas <jacob.thomas@windriver.com>
Date: Wed, 11 May 2016 11:34:04 +0900
Subject: [PATCH 053/170] added-alarm-in-rtc-driver


diff --git a/arch/arm/mach-lm2/lm2.c b/arch/arm/mach-lm2/lm2.c
index 66282d5..ae9369f 100644
--- a/arch/arm/mach-lm2/lm2.c
+++ b/arch/arm/mach-lm2/lm2.c
@@ -227,6 +227,11 @@ static  struct resource lm2_rtc_resource[] ={
                 .end    = 0x04030100,
                 .flags  = IORESOURCE_MEM,
         },
+	{
+		.start	= 34,
+		.end	= 34,
+		.flags	= IORESOURCE_IRQ,
+	},
 };
 
 static	struct platform_device lm2_rtc_device = {
@@ -234,7 +239,6 @@ static	struct platform_device lm2_rtc_device = {
 	.id		= -1,
 	.resource	= lm2_rtc_resource,
 	.num_resources	= ARRAY_SIZE(lm2_rtc_resource),
-
 };
 
 /*
diff --git a/drivers/rtc/rtc-quatro53xx.c b/drivers/rtc/rtc-quatro53xx.c
index c418e0f..b925685 100644
--- a/drivers/rtc/rtc-quatro53xx.c
+++ b/drivers/rtc/rtc-quatro53xx.c
@@ -1,5 +1,5 @@
 /*
- * arch/arm/plat-waikiki/rtc.c	- rtc low level driver
+ * drivers/rtc/rtc-quatro55xx.c - RTC driver
  *
  * Copyright (C) 2014 Wind River Systems, Inc.
  * Koki Yamano <koki.yamano@windriver.com>
@@ -10,6 +10,7 @@
  */
 /*
  * revision:
+ * 1.0	update software alarm
  * 0.2  connection fail
  * 0.1  added alram function. All Interface clean. where alarm register?
  * 0.0	initial 
@@ -67,10 +68,14 @@
 
 struct	lm2_rtc	{
 	volatile u8 __iomem	*rtc_base;
+	int			irq;
 	struct rtc_device	*rtc;
 	unsigned long		count;
 //	spinlock_t		lock;
 	struct mutex		lock;
+	unsigned long		alm_en;
+	unsigned long		alm_sec;
+	int			tim_en;
 };
 
 /*
@@ -310,6 +315,62 @@ static	int	lm2_get_time(struct device *dev, struct rtc_time *tm)
 
 	return	0;
 }
+static	irqreturn_t	lm2_timer_irq_handler(int irq, void *ptr)
+{
+	struct	lm2_rtc	*rtc = ptr;
+	unsigned int	currect;
+
+	current = readl(rtc->rtc_base+ RTCCNT);
+
+	if(rtc->alm_en){
+		if(current >= rtc->alm_sec ){
+			rtc_update_irq(rtc, 1, RTC_AF | RTC_IRQF);
+		}
+	}
+
+	return	IRQ_HANDLED;
+}
+
+static	int	lm2_read_alarm(struct device *dev, struct rtc_wkalrm *alm)
+{
+	struct lm2_rtc *rtc = dev_get_drvdata(dev);
+
+	dev_info(dev, "lm2_set_alarm call\n");
+	rtc_time_to_tm(rtc->alm_sec, &alm->time);
+
+	return	0;
+}
+
+static	int	lm2_set_alarm(struct device *dev, struct rtc_wkalrm *alm)
+{
+	struct lm2_rtc *rtc = dev_get_drvdata(dev);
+	unsigned long	time;
+
+	dev_info(dev, "lm2_set_alarm call %lx \n", alm->time);
+	rtc_tm_to_time(&alm->time, &time);
+	rtc->alm_sec = time;
+	return	0;
+}
+
+static	int	lm2_alarm_enable(struct device *dev, unsigned int enable)
+{
+	struct lm2_rtc *rtc = dev_get_drvdata(dev);
+
+	dev_info(dev, "lm2_alarm_enable call % d\n", enable);
+	dev_info(dev, "lm2_alarm tim_en %d\n",rtc->tim_en);
+	if(enable == 1){
+		if(request_irq(rtc->irq, lm2_timer_irq_handler, 0, "lm2_rtc", dev)){
+			return	-EINVAL;
+		}
+		rtc->alm_en = 1;
+		rtc->tim_en = 1;
+	}else{
+		if(rtc->tim_en == 0)	return	0;
+		free_irq(rtc->irq,dev);
+		rtc->alm_en = 0;
+	}
+	return	0;
+}
 
 const static struct of_device_id rtc_of_match[] __initconst = {
 	{ .compatible = "waikiki,lm2-rtc", },
@@ -319,12 +380,16 @@ const static struct of_device_id rtc_of_match[] __initconst = {
 static const	struct	rtc_class_ops	lm2_rtc_ops = {
 	.read_time	= lm2_get_time,
 	.set_time	= lm2_set_time,
+	.read_alarm	= lm2_read_alarm,
+	.set_alarm	= lm2_set_alarm,
+	.alarm_irq_enable	= lm2_alarm_enable,
 };
 
 static int __init lm2_rtc_probe(struct platform_device *pdev)
 {
 	struct lm2_rtc	*dev;
 	struct resource	*mem;
+	struct resource *irq;
 	u32	val;
 	u8	reg;
 	
@@ -332,12 +397,12 @@ static int __init lm2_rtc_probe(struct platform_device *pdev)
 
 	/* Private date get */
 	dev = devm_kzalloc(&pdev->dev,sizeof(struct lm2_rtc), GFP_KERNEL);
+//	dev = kzalloc(sizeof(struct lm2_rtc), GFP_KERNEL);
 	if(!dev){
 		dev_err(&pdev->dev,"Could not allocate RTC driver space \n");
 		return	-ENOMEM;
 	}
 
-
 	mem = platform_get_resource(pdev,IORESOURCE_MEM,0);
 	if(!mem){
 		dev_err(&pdev->dev,"no mmio space\n");
@@ -352,16 +417,24 @@ static int __init lm2_rtc_probe(struct platform_device *pdev)
 		return	-ENOMEM;
 	}
 
+	dev->irq = platform_get_irq(pdev, 0);
+	if(!dev->irq){
+		kfree(dev);
+		dev_err(&pdev->dev, " Could not get IRQ resource\n");
+		return	-ENOMEM;
+	}	
+
 	mutex_init(&dev->lock);
 
 	dev->count = 0;
-	
+	dev->alm_en =0;
+	dev->tim_en =0;	
+
 	platform_set_drvdata(pdev,dev);
 
 	dev->rtc = rtc_device_register("lm2-rtc", &pdev->dev, &lm2_rtc_ops, THIS_MODULE);
 
 	device_init_wakeup(&pdev->dev, 1);
-
 	/*
  	 * To Do check connection and start
  	 */
-- 
1.7.1

