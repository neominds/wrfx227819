From 4456405614024f3c9caee337d60a03a868323da8 Mon Sep 17 00:00:00 2001
From: jthomas <jacob.thomas@windriver.com>
Date: Wed, 11 May 2016 11:33:56 +0900
Subject: [PATCH 047/170] i2c-bigfix


diff --git a/arch/arm/mach-lm2/lm2.c b/arch/arm/mach-lm2/lm2.c
index c57878d..e081f05 100644
--- a/arch/arm/mach-lm2/lm2.c
+++ b/arch/arm/mach-lm2/lm2.c
@@ -272,13 +272,13 @@ static struct platform_device lm2_wdt_device = {
 
 static	struct resource	lm2_i2c_resource[] = {
 	{
-		.start	= 0x041F0000,
-		.end	= 0x041F00FF,
+		.start	= 0x041F0100,
+		.end	= 0x041F01FF,
 		.flags	= IORESOURCE_MEM,
 	},
 	{
-		.start	= 0x041F0100,
-		.end	= 0x041F01FF,
+		.start	= 0x041F0000,
+		.end	= 0x041F00FF,
 		.flags	= IORESOURCE_MEM,
 	},
 	{
diff --git a/drivers/i2c/busses/i2c-lm2.c b/drivers/i2c/busses/i2c-lm2.c
index 4c208d1..bbcb95a 100644
--- a/drivers/i2c/busses/i2c-lm2.c
+++ b/drivers/i2c/busses/i2c-lm2.c
@@ -2,7 +2,7 @@
  * i2c - I2C like a EEPROM driver for the waikiki board
  *
  * Copyright 2014 Wind River Systems, Inc.
- *
+ *	base on i2c-sh7760.c
  * This file is licensed under the terms of the GNU General Public
  * License version 2. This program is licensed "as is" without any
  * warranty of any kind, whether express or implied.
@@ -22,14 +22,14 @@
 #include <linux/module.h>
 
 /* register offsets */
-#define	EMSR		0x0100	/* EEPROM Mode Setting Register		*/
-#define	ESAR		0x0104	/* EEPROM Slave Address Register	*/
-#define	EWAR		0x0108	/* EEPROM Word Address Register		*/
-#define	EDSTR		0x0118	/* EEPROM Data Status Register		*/
-#define	ESTR		0x011C	/* EEPROM Status Register		*/
-#define	EECR		0x0120	/* EEPROM Error Clear Register		*/
-#define	EWWT		0x0124	/* EEPROM Wait Timer Register		*/
-#define	EDR1		0x0140	/* EEPROM Read/Write Data Register 1	*/
+#define	EMSR		0x0000	/* EEPROM Mode Setting Register		*/
+#define	ESAR		0x0004	/* EEPROM Slave Address Register	*/
+#define	EWAR		0x0008	/* EEPROM Word Address Register		*/
+#define	EDSTR		0x0018	/* EEPROM Data Status Register		*/
+#define	ESTR		0x001C	/* EEPROM Status Register		*/
+#define	EECR		0x0020	/* EEPROM Error Clear Register		*/
+#define	EWWT		0x0024	/* EEPROM Wait Timer Register		*/
+#define	EDR1		0x0040	/* EEPROM Read/Write Data Register 1	*/
 
 /* Misc Interrupt status / Mask register bit */
 #define	MISC_INT_STS	0x0040
@@ -58,6 +58,9 @@ struct lm2_i2c_eeprom {
 	int		irq;		/* irq				*/
 	struct completion	xfer_done;
 	struct resource *ioarea;	/* save resource data		*/
+	unsigned int	len;
+	unsigned char	offset;
+	unsigned char	buf[32];
 };
 
 /*
@@ -70,14 +73,17 @@ static irqreturn_t lm2_i2c_irq(int irq, void *ptr)
 	char *data = msg->buf;
 	unsigned long msr, fsr, fier, len, stat;
 
-	stat = readl(id->miscbase+MISC_INT_STS);
-
-	/* need error interrupt ? */
-	id->status = E2P_TRANS_DONE;
-	/* ToDo: error handling or something */
+	stat = readl(id->miscbase + MISC_INT_STS);
+	if(stat & E2P_TRANS_COMP){
+		/* complete */
+		id->status = E2P_TRANS_DONE;
+	}
+	if(stat & E2P_ACK_ERR){
+		id->status = 0;
+	}
 finish:
-	stat &= E2P_TRANS_COMP;
-	writel(id->miscbase+MISC_INT_CLEAR,stat);
+	stat |= E2P_TRANS_COMP;
+	writel(stat, id->miscbase + MISC_INT_CLEAR);
 
 	complete(&id->xfer_done);
 
@@ -89,51 +95,40 @@ finish:
 static void lm2_i2c_mrecv(struct lm2_i2c_eeprom *id)
 {
 	int len;
+	unsigned int	reg;
+
+	dev_info(id->adap.dev.parent, "mrecv call\n");
+	/* set the read count */
+	reg = readl(id->iobase + EMSR);
+	reg |= ((id->len-1) << 14);
+	writel(reg, id->iobase + EMSR);
 
 	/* set the slave addr reg; otherwise xmit wont work! */
-	writel(id->msg->addr,id->iobase+ESAR);
+//	writel(id->msg->addr,id->iobase+ESAR);
 
-	/* set address */
-	writel(id->addr, id->iobase+EWAR);
+	/* set read start address */
+	writel(id->addr, id->iobase + EWAR);
 
 	/* start read */
-	writel(0x01,id->iobase+ESTR);
+	writel(0x00000001,id->iobase + ESTR);
 
 }
 
 /* prepare and start a master send operation */
 static void lm2_i2c_msend(struct lm2_i2c_eeprom *id)
 {
-	int	len;
 	u32	val;
-	int	cnt;
 
-	/* set transfer byte to EMSR */
-	/* only 1byte mode */
-	/* don't touch clk */
-
-	len = id->msg->len;
-	len &= 0x1f;
-	val = readl(id->iobase+EMSR);
-	val = val | (len <<14);
+	dev_info(id->adap.dev.parent, "msend call\n");
+	val = readl(id->iobase + EMSR);
+	val = val | ((id->len-1) << 14);
 	writel(val, id->iobase+EMSR);
 
-	/* set the slave addr reg; otherwise xmit wont work! */
-	writel(id->msg->addr,id->iobase+ESAR);
-
 	/* set address */
-	writel(id->addr, id->iobase+EWAR);
-	cnt = 0;
-	/* set data */
-	while (len) {
-		writel(id->msg->buf, id->iobase+EDR1+cnt);
-		len--;
-		(id->msg->buf)++;
-		cnt++;
-	}
-	/* transfer start */
+	writel(id->addr, id->iobase + EWAR);
 
-	writel(0x02,id->iobase+ESTR);
+	/* transfer start */
+	writel(0x00000002,id->iobase + ESTR);
 }
 
 static inline int lm2_i2c_busy_check(struct lm2_i2c_eeprom *id)
@@ -149,32 +144,45 @@ static int lm2_i2c_master_xfer(struct i2c_adapter *adap,
 				  int num)
 {
 	struct lm2_i2c_eeprom *id = adap->algo_data;
-	int i, retr;
+	int 	i, ret;
 	struct	i2c_msg	dat;
 	u32	length;
-
+	u32	idx;
 
 	if (lm2_i2c_busy_check(id)) {
-		dev_err(&adap->dev, "sh7760-i2c%d: bus busy!\n", adap->nr);
+		dev_err(&adap->dev, "lm2-i2c %d: bus busy!\n", adap->nr);
 		return -EBUSY;
 	}
+	dev_info( &adap->dev, "call master xfer %x %d\n", msgs, num);
+	dev_info(&adap->dev, "slave addr = %d\n",msgs->addr);
+	dev_info(&adap->dev, "flags = %x\n",msgs->flags);
+	dev_info(&adap->dev, "msg length = %d\n",msgs->len);
+	dev_info(&adap->dev, "buf = %x\n",msgs->buf);
+
+	id->msg = msgs;
 	length = msgs->len;
+	idx = 0;
 	id->addr =0;
 	while (length) {
-		if(length >32 )	dat.len=32;
-		dat.len=length;
-		length = length - dat.len;
-		dat.buf = &msgs->buf[id->addr];
-		id->status = 0;
-		id->msg = &dat;
-
+		if(length > 32){
+			id->len = 32;
+		}else{
+			id->len = length;
+		}
 		/* setup synchronize */
 		init_completion(&id->xfer_done);
 
-		if (msgs->flags & I2C_M_RD)
+dev_info(&adap->dev, "idx = %d length= %d\n", idx, length);
+		if (msgs->flags & I2C_M_RD){
+			id->addr = idx;
 			lm2_i2c_mrecv(id);	/* recv */
-		else
+		}else{
+			for(i = 0 ; i < id->len ; i++){
+				writel(msgs->buf[idx],id->iobase+EDR1+i);
+				idx++;
+			}
 			lm2_i2c_msend(id);	/* send */
+		}
 
 		/* transfer complete wait for isr */
 		wait_for_completion(&id->xfer_done);
@@ -185,20 +193,13 @@ static int lm2_i2c_master_xfer(struct i2c_adapter *adap,
 		}
 
 		if(msgs->flags & I2C_M_RD) {
-			int	i=0;
-			while(id->msg->len) {
-				msgs->buf[id->addr+i] = (char)readl(id->iobase+EDR1+i);
-				id->msg->len--;
-				i++;
+			for(i = 0 ; i < id->len ; i++){
+				msgs->buf[idx] = (char)readl(id->iobase+EDR1+i);
+				idx++;
 			}
 		}
-		id->addr = id->addr + id->msg->len;
+		length = length - id->len;
 	}
-
-	id->msg = NULL;
-	id->flags = 0;
-	id->status = 0;
-
 	return	num;
 }
 
@@ -219,6 +220,7 @@ static int lm2_i2c_probe(struct platform_device *pdev)
 	struct resource		*misc_res;
 	struct lm2_i2c_eeprom	*id;
 	int 	ret;
+	unsigned int	mask;
 
 	/* sanity check */
 	dev_info(&pdev->dev, "LM2 I2C EEPROM Driver loading\n");
@@ -253,18 +255,22 @@ static int lm2_i2c_probe(struct platform_device *pdev)
 		ret = -ENODEV;
 		goto out1;
 	}
-
+	id->iobase = ioremap(res->start, 0x200 );
+	if(!id->iobase){
+		dev_err(&pdev->dev, "cannot I2C REG ioremap %x \n", res->start);
+	}
+#if 0
 	id->ioarea = request_mem_region(res->start, REGSIZE, pdev->name);
 	if (!id->ioarea) {
 		dev_err(&pdev->dev, "mmio already reserved\n");
 		ret = -EBUSY;
 		goto out1;
 	}
-
+#endif
 	misc_res = platform_get_resource(pdev, IORESOURCE_MEM, 1);
-	id->iobase = ioremap(misc_res->start, REGSIZE);
-	if (!id->iobase) {
-		dev_err(&pdev->dev, "cannot ioremap\n");
+	id->miscbase = ioremap(misc_res->start, REGSIZE);
+	if (!id->miscbase) {
+		dev_err(&pdev->dev, "cannot MISC REG ioremap %x \n", misc_res->start);
 		ret = -ENODEV;
 		goto out2;
 	}
@@ -277,6 +283,9 @@ static int lm2_i2c_probe(struct platform_device *pdev)
 	id->adap.retries = 3;
 	id->adap.algo_data = id;
 	id->adap.dev.parent = &pdev->dev;
+
+	init_completion(&id->xfer_done);
+
 	snprintf(id->adap.name, sizeof(id->adap.name),
 		"LM2 I2C at %08lx", (unsigned long)res->start);
 
@@ -287,15 +296,30 @@ static int lm2_i2c_probe(struct platform_device *pdev)
 		goto out3;
 	}
 
+	mask = 0xffffffff;
+	writel(mask, id->miscbase + 0x48);
+
+	mask = readl(id->miscbase + 0x44);
+	mask &= 0xffffffcf;
+	dev_info(&pdev->dev, "INt MASK %x\n",mask);
+	writel(mask, id->miscbase + 0x44);
+	mask = readl(id->miscbase + 0x44);
+	dev_info(&pdev->dev, "INt MASK %x\n",mask);
+
 	ret = i2c_add_numbered_adapter(&id->adap);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "reg adap failed: %d\n", ret);
 		goto out4;
 	}
 	dev_info(&pdev->dev, "I2C Driver Registered iomem = %x misc = %x IRQ = %d\n",
-		id->ioarea, id->iobase, id->irq);
-
-
+		 id->iobase, id->miscbase, id->irq);
+	dev_info(&pdev->dev, "EMSR=%x\n",(int)*((int *)(id->iobase+EMSR)));
+	dev_info(&pdev->dev, "ESAR=%x\n",(int)*((int *)(id->iobase+ESAR)));
+	dev_info(&pdev->dev, "EWAR=%x\n",(int)*((int *)(id->iobase+EWAR)));
+	dev_info(&pdev->dev, "EDSTR=%x\n",(int)*((int *)(id->iobase+EDSTR)));
+	dev_info(&pdev->dev, "ESTR=%x\n",(int)*((int *)(id->iobase+ESTR)));
+	dev_info(&pdev->dev, "EECR=%x\n",(int)*((int *)(id->iobase+EECR)));
+	dev_info(&pdev->dev, "EWWT=%x\n",(int)*((int *)(id->iobase+EWWT)));
 	return 0;
 
 out4:
diff --git a/drivers/spi/Kconfig b/drivers/spi/Kconfig
index 3862333..9725efb 100644
--- a/drivers/spi/Kconfig
+++ b/drivers/spi/Kconfig
@@ -529,8 +529,9 @@ config SPI_DW_MMIO
 	depends on SPI_DESIGNWARE && HAVE_CLK
 
 config SPI_XSPI
-	bool "LM2 XSPI SRAM/CPLD Driver"
+	tristate "LM2 XSPI SRAM/CPLD Driver"
 	depends on ARCH_LM2
+	select	SPI_SPIDEV
 	help
 
 #
-- 
1.7.1

