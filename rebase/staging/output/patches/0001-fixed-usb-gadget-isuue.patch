From efbd09a5706e5122aae4d927c6304a9d59efdbb1 Mon Sep 17 00:00:00 2001
From: jthomas <jacob.thomas@windriver.com>
Date: Wed, 11 May 2016 11:35:24 +0900
Subject: [PATCH 112/170] 0001-fixed-usb-gadget-isuue


diff --git a/arch/arm/mach-lm2/usb.c b/arch/arm/mach-lm2/usb.c
index 9781c48..53b623f 100644
--- a/arch/arm/mach-lm2/usb.c
+++ b/arch/arm/mach-lm2/usb.c
@@ -109,8 +109,8 @@ struct dwc3_platform_data {
 static	struct dwc3_platform_data	dwc3_plat_data = {
 	.maximum_speed	= USB_SPEED_SUPER,
 	.dr_mode	= USB_DR_MODE_PERIPHERAL,
-//	.tx_fifo_resize	= 1,	/* original */
-	.tx_fifo_resize	= 0,	/* original */
+	.tx_fifo_resize	= 1,	/* original */
+//	.tx_fifo_resize	= 0,	/* original */
 };
 
 static  u64     lm2_usbd_dmamask = DMA_BIT_MASK(64);
@@ -130,10 +130,10 @@ static	struct platform_device lm2_usb_devs_device = {
 int	__init	lm2_usb_register(void)
 {
 	int	result;
-	void __iomem	*ptr;
+//	void __iomem	*ptr;
 
-	ptr= ioremap(LM2_USB2_PHY,0x500);
-	printk(KERN_WARNING "USB Register Device %x PHY address",ptr);
+//	ptr= ioremap(LM2_USB2_PHY,0x500);
+//	printk(KERN_WARNING "USB Register Device %x PHY address",ptr);
 
 	result = platform_device_register(&lm2_usb_host_device);
 	result = platform_device_register(&lm2_usb_devs_device);
diff --git a/drivers/usb/dwc3/core.c b/drivers/usb/dwc3/core.c
index e55144c..03ee7cf 100644
--- a/drivers/usb/dwc3/core.c
+++ b/drivers/usb/dwc3/core.c
@@ -85,7 +85,7 @@ int dwc3_core_soft_reset(struct dwc3 *dwc)
 {
 	u32		reg;
 	int		ret;
-dev_err(dwc->dev, "dwc3_core_soft_reset entry\n");
+//dev_err(dwc->dev, "dwc3_core_soft_reset entry\n");
 	/* Before Resetting PHY, put Core in Reset */
 	reg = dwc3_readl(dwc->regs, DWC3_GCTL);
 	reg |= DWC3_GCTL_CORESOFTRESET;
@@ -101,23 +101,22 @@ dev_err(dwc->dev, "dwc3_core_soft_reset entry\n");
 	reg |= DWC3_GUSB2PHYCFG_PHYSOFTRST;
 	dwc3_writel(dwc->regs, DWC3_GUSB2PHYCFG(0), reg);
 
-dev_err(dwc->dev, "usb_phy_init: %x : %x :\n",dwc->usb2_phy, dwc->usb3_phy);
+//dev_err(dwc->dev, "usb_phy_init: %x : %x :\n",dwc->usb2_phy, dwc->usb3_phy);
 //	usb_phy_init(dwc->usb2_phy);
 //	usb_phy_init(dwc->usb3_phy);
-dev_err(dwc->dev, "phy_init on USB2\n");
-	ret = phy_init(dwc->usb2_generic_phy);
-	if (ret < 0)
-		return ret;
+//dev_err(dwc->dev, "phy_init on USB2\n");
+//	ret = phy_init(dwc->usb2_generic_phy);
+//	if (ret < 0)
+//		return ret;
 
-dev_err(dwc->dev, "phy_init on USB3\n");
-	ret = phy_init(dwc->usb3_generic_phy);
-	if (ret < 0) {
-		phy_exit(dwc->usb2_generic_phy);
-		return ret;
-	}
-	mdelay(100*3);	/* yamano debug */
+//dev_err(dwc->dev, "phy_init on USB3\n");
+//	ret = phy_init(dwc->usb3_generic_phy);
+//	if (ret < 0) {
+//		phy_exit(dwc->usb2_generic_phy);
+//		return ret;
+//	}
 
-dev_err(dwc->dev, "clear PHY reset ALL\n");
+//dev_err(dwc->dev, "clear PHY reset ALL\n");
 	/* Clear USB3 PHY reset */
 	reg = dwc3_readl(dwc->regs, DWC3_GUSB3PIPECTL(0));
 	reg &= ~DWC3_GUSB3PIPECTL_PHYSOFTRST;
@@ -241,8 +240,8 @@ int dwc3_event_buffers_setup(struct dwc3 *dwc)
 
 	for (n = 0; n < dwc->num_event_buffers; n++) {
 		evt = dwc->ev_buffs[n];
-	//	dev_dbg(dwc->dev, "Event buf %p dma %08llx length %d\n",
-		printk(KERN_ERR "Event buf %p dma %08llx length %d\n",
+//		printk(KERN_ERR "Event buf %p dma %08llx length %d\n",
+		dev_dbg(dwc->dev, "Event buf %p dma %08llx length %d\n",
 				evt->buf, (unsigned long long) evt->dma,
 				evt->length);
 
@@ -410,7 +409,7 @@ static int dwc3_core_init(struct dwc3 *dwc)
 		goto err0;
 	}
 	dwc->revision = reg;
-printk(KERN_ERR "## %s revision %x \n",__FUNCTION__,dwc->revision);
+//printk(KERN_ERR "## %s revision %x \n",__FUNCTION__,dwc->revision);
 //dev_err(dwc->dev, "prepare soft reset\n");
 	/* issue device SoftReset too */
 #if	1	/*	<HN>	*/
@@ -482,17 +481,17 @@ dev_err(dwc->dev, "Workraount DWC3 Switch core\n");
 	if (dwc->revision < DWC3_REVISION_190A)
 		reg |= DWC3_GCTL_U2RSTECN;
 
-dev_err(dwc->dev, "dwc3_core_num_eps\n");
+//dev_err(dwc->dev, "dwc3_core_num_eps\n");
 	dwc3_core_num_eps(dwc);
-printk(KERN_ERR "## %s Global Common Reg 0x%x\n",__FUNCTION__,reg);
+//printk(KERN_ERR "## %s Global Common Reg 0x%x\n",__FUNCTION__,reg);
 	dwc3_writel(dwc->regs, DWC3_GCTL, reg);
 
-dev_err(dwc->dev, "dwc3_alloc_scratch_buffer\n");
+//dev_err(dwc->dev, "dwc3_alloc_scratch_buffer\n");
 	ret = dwc3_alloc_scratch_buffers(dwc);
 	if (ret)
 		goto err1;
 #if	1 /*<HN>*/
-dev_err(dwc->dev, "dwc3_setup_scratch_buffers. Rev=%xH <HN>\n",dwc->revision);
+//dev_err(dwc->dev, "dwc3_setup_scratch_buffers. Rev=%xH <HN>\n",dwc->revision);
 #endif
 	ret = dwc3_setup_scratch_buffers(dwc);
 	if (ret)
@@ -680,8 +679,7 @@ static void usbd_hw_reset(void)
 	reg |= (RSTGENSWRSTSTATIC3__SYS_USSD_VCC__MASK |
 		RSTGENSWRSTSTATIC3__SYS_USSD__MASK);
 	writel(reg, rstgenswrststatic3);
-	udelay(100);	/* yamano debug */
-//	udelay(10);
+	udelay(10);
 	reg &= ~(RSTGENSWRSTSTATIC3__SYS_USSD_VCC__MASK |
 		RSTGENSWRSTSTATIC3__SYS_USSD__MASK);
 	writel(reg, rstgenswrststatic3);
@@ -823,7 +821,7 @@ dev_info(dev,"event buffer\n");
 	ret = dwc3_event_buffers_setup(dwc);
 		if (ret) {
 		dev_err(dwc->dev, "failed to setup event buffers\n");
-		goto err_usb3phy_power;
+//	goto err_usb3phy_power;
 		}
 
 dev_info(dev,"DWC3 core init mode\n");
@@ -851,10 +849,10 @@ err2:
 	dwc3_event_buffers_cleanup(dwc);
 
 err_usb3phy_power:
-	phy_power_off(dwc->usb3_generic_phy);
+//	phy_power_off(dwc->usb3_generic_phy);
 
 err_usb2phy_power:
-	phy_power_off(dwc->usb2_generic_phy);
+//	phy_power_off(dwc->usb2_generic_phy);
 
 err1:
 //	usb_phy_set_suspend(dwc->usb2_phy, 1);
@@ -958,8 +956,8 @@ static int dwc3_suspend(struct device *dev)
 
 //	usb_phy_shutdown(dwc->usb3_phy);
 //	usb_phy_shutdown(dwc->usb2_phy);
-	phy_exit(dwc->usb2_generic_phy);
-	phy_exit(dwc->usb3_generic_phy);
+//	phy_exit(dwc->usb2_generic_phy);
+//	phy_exit(dwc->usb3_generic_phy);
 
 	return 0;
 }
@@ -972,13 +970,13 @@ static int dwc3_resume(struct device *dev)
 
 //	usb_phy_init(dwc->usb3_phy);
 //	usb_phy_init(dwc->usb2_phy);
-	ret = phy_init(dwc->usb2_generic_phy);
-	if (ret < 0)
-		return ret;
+//	ret = phy_init(dwc->usb2_generic_phy);
+//	if (ret < 0)
+//		return ret;
 
-	ret = phy_init(dwc->usb3_generic_phy);
-	if (ret < 0)
-		goto err_usb2phy_init;
+//	ret = phy_init(dwc->usb3_generic_phy);
+//	if (ret < 0)
+//		goto err_usb2phy_init;
 
 	spin_lock_irqsave(&dwc->lock, flags);
 
diff --git a/drivers/usb/dwc3/ep0.c b/drivers/usb/dwc3/ep0.c
index 0fd297d..df59283 100644
--- a/drivers/usb/dwc3/ep0.c
+++ b/drivers/usb/dwc3/ep0.c
@@ -82,7 +82,8 @@ static int dwc3_ep0_start_trans(struct dwc3 *dwc, u8 epnum, dma_addr_t buf_dma,
 	struct dwc3_ep			*dep;
 
 	int				ret;
-
+//printk(KERN_ERR "### %s Entry \n",__func__);
+//	msleep(100);	/* yamano */
 	dep = dwc->eps[epnum];
 	if (dep->flags & DWC3_EP_BUSY) {
 		dev_vdbg(dwc->dev, "%s: still busy\n", dep->name);
@@ -105,6 +106,7 @@ static int dwc3_ep0_start_trans(struct dwc3 *dwc, u8 epnum, dma_addr_t buf_dma,
 	params.param0 = upper_32_bits(dwc->ep0_trb_addr);
 	params.param1 = lower_32_bits(dwc->ep0_trb_addr);
 
+//printk(KERN_ERR "# EP0 # %s Entry \n",__func__);
 	ret = dwc3_send_gadget_ep_cmd(dwc, dep->number,
 			DWC3_DEPCMD_STARTTRANSFER, &params);
 	if (ret < 0) {
@@ -130,6 +132,7 @@ static int __dwc3_gadget_ep0_queue(struct dwc3_ep *dep,
 	req->request.status	= -EINPROGRESS;
 	req->epnum		= dep->number;
 
+//printk(KERN_ERR "# EP0 # %s Entry \n",__func__);
 	list_add_tail(&req->list, &dep->request_list);
 
 	/*
@@ -235,6 +238,7 @@ int dwc3_gadget_ep0_queue(struct usb_ep *ep, struct usb_request *request,
 
 	int				ret;
 
+//printk(KERN_ERR "# EP0 # %s Entry \n",__func__);
 	spin_lock_irqsave(&dwc->lock, flags);
 	if (!dep->endpoint.desc) {
 		dev_dbg(dwc->dev, "trying to queue request %p to disabled %s\n",
@@ -257,6 +261,7 @@ int dwc3_gadget_ep0_queue(struct usb_ep *ep, struct usb_request *request,
 
 out:
 	spin_unlock_irqrestore(&dwc->lock, flags);
+//printk(KERN_ERR "# EP0 # %s Exit \n",__func__);
 
 	return ret;
 }
@@ -265,6 +270,7 @@ static void dwc3_ep0_stall_and_restart(struct dwc3 *dwc)
 {
 	struct dwc3_ep		*dep;
 
+//printk(KERN_ERR "# EP0 # %s Entry \n",__func__);
 	/* reinitialize physical ep1 */
 	dep = dwc->eps[1];
 	dep->flags = DWC3_EP_ENABLED;
@@ -279,6 +285,7 @@ static void dwc3_ep0_stall_and_restart(struct dwc3 *dwc)
 		struct dwc3_request	*req;
 
 		req = next_request(&dep->request_list);
+//printk(KERN_ERR "# EP0 # %s call giveback\n",__func__);
 		dwc3_gadget_giveback(dep, req, -ECONNRESET);
 	}
 
@@ -344,15 +351,19 @@ static int dwc3_ep0_handle_status(struct dwc3 *dwc,
 		 * LTM will be set once we know how to set this in HW.
 		 */
 		usb_status |= dwc->is_selfpowered << USB_DEVICE_SELF_POWERED;
-
+#if 1	/* yamano */
 		if (dwc->speed == DWC3_DSTS_SUPERSPEED) {
 			reg = dwc3_readl(dwc->regs, DWC3_DCTL);
-			if (reg & DWC3_DCTL_INITU1ENA)
+			if (reg & DWC3_DCTL_INITU1ENA){
+//printk(KERN_ERR "# EP0 # %s U1 Support \n",__func__);
 				usb_status |= 1 << USB_DEV_STAT_U1_ENABLED;
-			if (reg & DWC3_DCTL_INITU2ENA)
+			}
+			if (reg & DWC3_DCTL_INITU2ENA){
+//printk(KERN_ERR "# EP0 # %s U2 Support \n",__func__);
 				usb_status |= 1 << USB_DEV_STAT_U2_ENABLED;
+			}
 		}
-
+#endif
 		break;
 
 	case USB_RECIP_INTERFACE:
@@ -413,30 +424,40 @@ static int dwc3_ep0_handle_feature(struct dwc3 *dwc,
 		 * default control pipe
 		 */
 		case USB_DEVICE_U1_ENABLE:
+//printk(KERN_ERR "# EP0 # %s check U1 Entry \n",__func__);
 			if (state != USB_STATE_CONFIGURED)
 				return -EINVAL;
 			if (dwc->speed != DWC3_DSTS_SUPERSPEED)
 				return -EINVAL;
 
 			reg = dwc3_readl(dwc->regs, DWC3_DCTL);
-			if (set)
+			if (set){
+
+//printk(KERN_ERR "# EP0 # %s check U1 Enable \n",__func__);
 				reg |= DWC3_DCTL_INITU1ENA;
-			else
+			}else{
+
+//printk(KERN_ERR "# EP0 # %s check U1 Disable \n",__func__);
 				reg &= ~DWC3_DCTL_INITU1ENA;
+			}
 			dwc3_writel(dwc->regs, DWC3_DCTL, reg);
 			break;
 
 		case USB_DEVICE_U2_ENABLE:
+//printk(KERN_ERR "# EP0 # %s check U2 Entry \n",__func__);
 			if (state != USB_STATE_CONFIGURED)
 				return -EINVAL;
 			if (dwc->speed != DWC3_DSTS_SUPERSPEED)
 				return -EINVAL;
 
 			reg = dwc3_readl(dwc->regs, DWC3_DCTL);
-			if (set)
+			if (set){
+//printk(KERN_ERR "# EP0 # %s check U2 Enable \n",__func__);
 				reg |= DWC3_DCTL_INITU2ENA;
-			else
+			}else{
+//printk(KERN_ERR "# EP0 # %s check U2 Disble \n",__func__);
 				reg &= ~DWC3_DCTL_INITU2ENA;
+			}
 			dwc3_writel(dwc->regs, DWC3_DCTL, reg);
 			break;
 
@@ -782,6 +803,7 @@ static void dwc3_ep0_complete_data(struct dwc3 *dwc,
 	u32			length;
 	u8			epnum;
 
+//printk(KERN_ERR "# EP0 # %s Entry \n",__func__);
 	epnum = event->endpoint_number;
 	ep0 = dwc->eps[0];
 
@@ -830,6 +852,7 @@ static void dwc3_ep0_complete_data(struct dwc3 *dwc,
 		if (r)
 			dwc3_gadget_giveback(ep0, r, 0);
 	}
+//printk(KERN_ERR "# EP0 # %s Exit \n",__func__);
 }
 
 static void dwc3_ep0_complete_status(struct dwc3 *dwc,
@@ -842,6 +865,7 @@ static void dwc3_ep0_complete_status(struct dwc3 *dwc,
 
 	dep = dwc->eps[0];
 	trb = dwc->ep0_trb;
+//printk(KERN_ERR "# EP0 # %s Entry \n",__func__);
 
 	if (!list_empty(&dep->request_list)) {
 		r = next_request(&dep->request_list);
@@ -857,6 +881,7 @@ static void dwc3_ep0_complete_status(struct dwc3 *dwc,
 			dev_dbg(dwc->dev, "Invalid Test #%d\n",
 					dwc->test_mode_nr);
 			dwc3_ep0_stall_and_restart(dwc);
+//printk(KERN_ERR "# EP0 # %s stall exit \n",__func__);
 			return;
 		}
 	}
@@ -867,6 +892,7 @@ static void dwc3_ep0_complete_status(struct dwc3 *dwc,
 
 	dwc->ep0state = EP0_SETUP_PHASE;
 	dwc3_ep0_out_start(dwc);
+//printk(KERN_ERR "# EP0 # %s Exit \n",__func__);
 }
 
 static void dwc3_ep0_xfer_complete(struct dwc3 *dwc,
@@ -878,6 +904,7 @@ static void dwc3_ep0_xfer_complete(struct dwc3 *dwc,
 	dep->resource_index = 0;
 	dwc->setup_packet_pending = false;
 
+//printk(KERN_ERR "# EP0 # %s Entry \n",__func__);
 	switch (dwc->ep0state) {
 	case EP0_SETUP_PHASE:
 		dev_vdbg(dwc->dev, "Inspecting Setup Bytes\n");
@@ -956,6 +983,7 @@ static int dwc3_ep0_start_control_status(struct dwc3_ep *dep)
 	struct dwc3		*dwc = dep->dwc;
 	u32			type;
 
+//printk(KERN_ERR "# EP0 # %s Entry \n",__func__);
 	type = dwc->three_stage_setup ? DWC3_TRBCTL_CONTROL_STATUS3
 		: DWC3_TRBCTL_CONTROL_STATUS2;
 
@@ -965,10 +993,12 @@ static int dwc3_ep0_start_control_status(struct dwc3_ep *dep)
 
 static void __dwc3_ep0_do_control_status(struct dwc3 *dwc, struct dwc3_ep *dep)
 {
+//printk(KERN_ERR " # EP0 # %s Entry\n",__func__);
 	if (dwc->resize_fifos) {
 		dev_dbg(dwc->dev, "starting to resize fifos\n");
 		dwc3_gadget_resize_tx_fifos(dwc);
 		dwc->resize_fifos = 0;
+//printk(KERN_ERR " # EP0 # %s resize_fifo\n",__func__);
 	}
 
 	WARN_ON(dwc3_ep0_start_control_status(dep));
@@ -995,6 +1025,7 @@ static void dwc3_ep0_end_control_data(struct dwc3 *dwc, struct dwc3_ep *dep)
 	cmd |= DWC3_DEPCMD_CMDIOC;
 	cmd |= DWC3_DEPCMD_PARAM(dep->resource_index);
 	memset(&params, 0, sizeof(params));
+//printk(KERN_ERR "# EP0 # %s Entry \n",__func__);
 	ret = dwc3_send_gadget_ep_cmd(dwc, dep->number, cmd, &params);
 	WARN_ON_ONCE(ret);
 	dep->resource_index = 0;
@@ -1046,6 +1077,7 @@ static void dwc3_ep0_xfernotready(struct dwc3 *dwc,
 		dwc3_ep0_do_control_status(dwc, event);
 		break;
 	default:
+//printk(KERN_ERR "# EP0 # %s Other status\n",__func__);
 		dev_dbg(dwc->dev, "<<<DEPEVT_STATUS_CONTROL_XXXX(%xH)  <HN> >>>\n",event->status);
 		break;
 	}
diff --git a/drivers/usb/dwc3/gadget.c b/drivers/usb/dwc3/gadget.c
index 31f1cd5..e69f9a1 100644
--- a/drivers/usb/dwc3/gadget.c
+++ b/drivers/usb/dwc3/gadget.c
@@ -375,12 +375,11 @@ int dwc3_gadget_resize_tx_fifos(struct dwc3 *dwc)
 void dwc3_gadget_giveback(struct dwc3_ep *dep, struct dwc3_request *req,
 		int status)
 {
-	struct dwc3			*dwc = dep->dwc;
-	int				i;
+	struct dwc3	*dwc = dep->dwc;
+	int		i;
 #if	0	/*<HN>*/
 	dev_vdbg(dwc->dev, "%s <HN> Q=%d\n",__FUNCTION__,req->queued);
 #endif
-
 	if (req->queued) {
 		i = 0;
 		do {
@@ -431,6 +430,7 @@ void dwc3_gadget_giveback(struct dwc3_ep *dep, struct dwc3_request *req,
 	}
 #endif
 	spin_unlock(&dwc->lock);
+//printk(KERN_ERR "# GADGET # %s call compleate\n",__func__);
 	req->request.complete(&dep->endpoint, &req->request);
 	spin_lock(&dwc->lock);
 }
@@ -563,7 +563,7 @@ int dwc3_send_gadget_ep_cmd(struct dwc3 *dwc, unsigned ep,
 	u32			reg;
 
 /*	unsigned long			flags;*/
-
+//printk(KERN_ERR "# GADGET # %s Entry ep[%d] cmd '%x'\n",__FUNCTION__,ep,cmd);
 	dev_vdbg(dwc->dev, "%s: cmd '%s' params %08x %08x %08x\n",
 			dep->name,
 			dwc3_gadget_ep_cmd_string(cmd), params->param0,
@@ -579,8 +579,9 @@ int dwc3_send_gadget_ep_cmd(struct dwc3 *dwc, unsigned ep,
 	do {
 		reg = dwc3_readl(dwc->regs, DWC3_DEPCMD(ep));
 		if (!(reg & DWC3_DEPCMD_CMDACT)) {
-			dev_vdbg(dwc->dev, "Command Complete --> %d\n",
-					DWC3_DEPCMD_STATUS(reg));
+//			dev_vdbg(dwc->dev, "Command Complete --> %d\n",
+//printk(KERN_ERR "# GADGET # Command Complete --> %d\n",
+//					DWC3_DEPCMD_STATUS(reg));
 			return 0;
 		}
 
@@ -659,7 +660,7 @@ static int dwc3_gadget_start_config(struct dwc3 *dwc, struct dwc3_ep *dep)
 			dwc->start_config_issued = true;
 			cmd |= DWC3_DEPCMD_PARAM(2);
 		}
-
+//printk(KERN_ERR "# GADGET # %s Call EP Command \n",__func__);
 		return dwc3_send_gadget_ep_cmd(dwc, 0, cmd, &params);
 	}
 
@@ -682,7 +683,8 @@ static int dwc3_gadget_set_ep_config(struct dwc3 *dwc, struct dwc3_ep *dep,
 	if (dwc->gadget.speed == USB_SPEED_SUPER) {
 //printk(KERN_ERR "*** %s : USB_SPEED_SUPER\n",__FUNCTION__);
 		u32 burst = dep->endpoint.maxburst - 1;
-
+/* yamano debug */
+		if(burst < 1)	burst =1;
 		params.param0 |= DWC3_DEPCFG_BURST_SIZE(burst);
 	}
 
@@ -726,6 +728,7 @@ static int dwc3_gadget_set_ep_config(struct dwc3 *dwc, struct dwc3_ep *dep,
 		dep->interval = 1 << (desc->bInterval - 1);
 	}
 
+//printk(KERN_ERR "# GADGET # %s Call EP Setup Command \n",__func__);
 	return dwc3_send_gadget_ep_cmd(dwc, dep->number,
 			DWC3_DEPCMD_SETEPCONFIG, &params);
 }
@@ -738,6 +741,7 @@ static int dwc3_gadget_set_xfer_resource(struct dwc3 *dwc, struct dwc3_ep *dep)
 
 	params.param0 = DWC3_DEPXFERCFG_NUM_XFER_RES(1);
 
+//printk(KERN_ERR "# GADGET # %s Call Set trans resource \n",__func__);
 	return dwc3_send_gadget_ep_cmd(dwc, dep->number,
 			DWC3_DEPCMD_SETTRANSFRESOURCE, &params);
 }
@@ -1234,6 +1238,7 @@ static int __dwc3_gadget_kick_transfer(struct dwc3_ep *dep, u16 cmd_param,
 	}
 	if (!req) {
 		dep->flags |= DWC3_EP_PENDING_REQUEST;
+//printk(KERN_ERR "# GADGET # %s Not Start\n",__func__);
 		return 0;
 	}
 
@@ -1248,7 +1253,8 @@ static int __dwc3_gadget_kick_transfer(struct dwc3_ep *dep, u16 cmd_param,
 	}
 
 	cmd |= DWC3_DEPCMD_PARAM(cmd_param);
-
+//if(start_new == 1)
+//printk(KERN_ERR "# GADGET # %s Entry \n",__func__);
 	ret = dwc3_send_gadget_ep_cmd(dwc, dep->number, cmd, &params);
 
 	if (ret < 0) {
@@ -1262,6 +1268,7 @@ static int __dwc3_gadget_kick_transfer(struct dwc3_ep *dep, u16 cmd_param,
 		usb_gadget_unmap_request(&dwc->gadget, &req->request,
 				req->direction);
 		list_del(&req->list);
+//printk(KERN_ERR "# GADGET # %s start now command failer\n",__func__);
 		return ret;
 	}
 
@@ -1273,7 +1280,7 @@ static int __dwc3_gadget_kick_transfer(struct dwc3_ep *dep, u16 cmd_param,
 		WARN_ON_ONCE(!dep->resource_index);
 	}
 
-	udelay(5);	/*<HN> Try to sync 0306	*/
+//	udelay(5);	/*<HN> Try to sync 0306	*/
 
 	return 0;
 }
@@ -1283,6 +1290,7 @@ static void __dwc3_gadget_start_isoc(struct dwc3 *dwc,
 {
 	u32 uf;
 
+//printk(KERN_ERR "# GADGET # %s Entry \n",__func__);
 	if (list_empty(&dep->request_list)) {
 		dev_vdbg(dwc->dev, "ISOC ep %s run out for requests.\n",
 			dep->name);
@@ -1294,6 +1302,7 @@ static void __dwc3_gadget_start_isoc(struct dwc3 *dwc,
 	uf = cur_uf + dep->interval * 4;
 
 	__dwc3_gadget_kick_transfer(dep, uf, 1);
+//printk(KERN_ERR "# GADGET # %s Exit \n",__func__);
 }
 
 static void dwc3_gadget_start_isoc(struct dwc3 *dwc,
@@ -1471,7 +1480,6 @@ static int dwc3_gadget_ep_dequeue(struct usb_ep *ep,
 		ret = -EINVAL;
 		goto out0;
 	}
-
 out1:
 	/* giveback the request */
 	dwc3_gadget_giveback(dep, req, -ECONNRESET);
@@ -1499,6 +1507,7 @@ int __dwc3_gadget_ep_set_halt(struct dwc3_ep *dep, int value, int protocol)
 			return -EAGAIN;
 		}
 
+		//printk(KERN_ERR "## %s Entry value\n",__func__);
 		ret = dwc3_send_gadget_ep_cmd(dwc, dep->number,
 			DWC3_DEPCMD_SETSTALL, &params);
 		if (ret)
@@ -1508,6 +1517,7 @@ int __dwc3_gadget_ep_set_halt(struct dwc3_ep *dep, int value, int protocol)
 		else
 			dep->flags |= DWC3_EP_STALL;
 	} else {
+//printk(KERN_ERR "## %s Entry not value\n",__func__);
 		ret = dwc3_send_gadget_ep_cmd(dwc, dep->number,
 			DWC3_DEPCMD_CLEARSTALL, &params);
 		if (ret)
@@ -1819,6 +1829,10 @@ int dwc3_gadget_restart(struct dwc3 *dwc)
  	u32			reg;
 	struct dwc3_ep		*dep;
 
+	#ifdef	HNDEBUG
+	//	printk("%s DWC3_DFCG = %x P1=%pH P2=%pH <HN>\n",__FUNCTION__,g,driver);
+	#endif
+
 	dwc->has_gadget = true;
 	reg = dwc3_readl(dwc->regs, DWC3_DCFG);
 	reg &= ~(DWC3_DCFG_SPEED_MASK);
@@ -2285,7 +2299,7 @@ static void dwc3_endpoint_interrupt(struct dwc3 *dwc,
 	if (!(dep->flags & DWC3_EP_ENABLED))
 		return;
 
-//	printk(KERN_ERR "%s %s: %s\n",__FUNCTION__, dep->name,	/* yamano */
+//printk(KERN_ERR "%s %s: %s\n",__FUNCTION__, dep->name,	/* yamano */
 	dev_vdbg(dwc->dev, "%s: %s\n", dep->name,
 			dwc3_ep_event_string(event->endpoint_event));
 
@@ -2326,8 +2340,9 @@ static void dwc3_endpoint_interrupt(struct dwc3 *dwc,
 					DEPEVT_STATUS_TRANSFER_ACTIVE
 					? "Transfer Active"
 					: "Transfer Not Active");
-
+//printk(KERN_ERR "# GADGET # %s XFERNOTREADY\n",__func__);
 			ret = __dwc3_gadget_kick_transfer(dep, 0, 1);
+//printk(KERN_ERR "# GADGET # %s kick start XFERNOTREADY\n",__func__);
 			if (!ret || ret == -EBUSY)
 				return;
 
@@ -2357,11 +2372,12 @@ static void dwc3_endpoint_interrupt(struct dwc3 *dwc,
 		}
 		break;
 	case DWC3_DEPEVT_RXTXFIFOEVT:
+//printk(KERN_ERR "%s FIFO Overrun\n", dep->name);
 		dev_dbg(dwc->dev, "%s FIFO Overrun\n", dep->name);
 		break;
 	case DWC3_DEPEVT_EPCMDCMPLT:
 		
-//		printk(KERN_ERR "*** %s Endpoint Command Complete\n",__FUNCTION__);
+//printk(KERN_ERR "%s Endpoint Command Complete\n",__func__);
 		dev_dbg(dwc->dev, "Endpoint Command Complete\n");
 		break;
 	default:
@@ -2434,11 +2450,12 @@ static void dwc3_stop_active_transfer(struct dwc3 *dwc, u32 epnum, bool force)
 	cmd |= DWC3_DEPCMD_CMDIOC;
 	cmd |= DWC3_DEPCMD_PARAM(dep->resource_index);
 	memset(&params, 0, sizeof(params));
+//printk(KERN_ERR "## %s Entry \n",__func__);
 	ret = dwc3_send_gadget_ep_cmd(dwc, dep->number, cmd, &params);
 	WARN_ON_ONCE(ret);
 	dep->resource_index = 0;
 	dep->flags &= ~DWC3_EP_BUSY;
-#if	1	/*	<HN>	*/
+#if	0	/*	<HN>	*/
 	udelay(1000);
 #else	/*Original*/
 	udelay(100);
@@ -2482,6 +2499,7 @@ static void dwc3_clear_stall_all_ep(struct dwc3 *dwc)
 		dep->flags &= ~DWC3_EP_STALL;
 
 		memset(&params, 0, sizeof(params));
+//printk(KERN_ERR "## %s Entry \n",__func__);
 		ret = dwc3_send_gadget_ep_cmd(dwc, dep->number,
 				DWC3_DEPCMD_CLEARSTALL, &params);
 		WARN_ON_ONCE(ret);
@@ -3017,6 +3035,7 @@ static void dwc3_process_event_entry(struct dwc3 *dwc,
 	/* REVISIT what to do with Carkit and I2C events ? */
 	default:
 		dev_err(dwc->dev, "UNKNOWN IRQ type %d\n", event->raw);
+		printk(KERN_ERR "UNKNOWN IRQ type %d\n", event->raw);
 	}
 }
 
@@ -3074,12 +3093,14 @@ static irqreturn_t dwc3_thread_interrupt(int irq, void *_dwc)
 	irqreturn_t ret = IRQ_NONE;
 	int i;
 
-	spin_lock_irqsave(&dwc->lock, flags);
+//	spin_lock_irqsave(&dwc->lock, flags);	/* yamano debug */
+	spin_lock(&dwc->lock);
 
 	for (i = 0; i < dwc->num_event_buffers; i++)
 		ret |= dwc3_process_event_buf(dwc, i);
 
-	spin_unlock_irqrestore(&dwc->lock, flags);
+//	spin_unlock_irqrestore(&dwc->lock, flags);
+	spin_unlock(&dwc->lock);
 
 	return ret;
 }
@@ -3110,10 +3131,13 @@ static irqreturn_t dwc3_check_event_buf(struct dwc3 *dwc, u32 buf)
 
 static irqreturn_t dwc3_interrupt(int irq, void *_dwc)
 {
-	struct dwc3			*dwc = _dwc;
-	int				i;
-	irqreturn_t			ret = IRQ_NONE;
+	struct dwc3	*dwc = _dwc;
+	int		i;
+	irqreturn_t	ret = IRQ_NONE;
+	unsigned long	flags;
+
 #if 1	/* ohkuma */
+//	spin_lock_irqsave(&dwc->lock,flags);
 #else
 	spin_lock(&dwc->lock);
 #endif	/* ohkuma */
@@ -3125,6 +3149,7 @@ static irqreturn_t dwc3_interrupt(int irq, void *_dwc)
 			ret = status;
 	}
 #if 1	/* ohkuma */
+//	spin_unlock_irqrestore(&dwc->lock,flags);
 #else
 	spin_unlock(&dwc->lock);
 #endif	/* ohkuma */
diff --git a/drivers/usb/gadget/ether.c b/drivers/usb/gadget/ether.c
index 56c8eca..cf1b816 100644
--- a/drivers/usb/gadget/ether.c
+++ b/drivers/usb/gadget/ether.c
@@ -24,7 +24,6 @@
 
 #include "u_ether.h"
 
-
 /*
  * Ethernet gadget driver -- with CDC and non-CDC options
  * Builds on hardware support for a full duplex link.
@@ -220,6 +219,7 @@ static int __init rndis_do_config(struct usb_configuration *c)
 	/* FIXME alloc iConfiguration string, set it in c->strings */
 
 	if (gadget_is_otg(c->cdev->gadget)) {
+//printk(KERN_ERR "##### %s otg entry\n",__func__);
 		c->descriptors = otg_desc;
 		c->bmAttributes |= USB_CONFIG_ATT_WAKEUP;
 	}
@@ -252,16 +252,21 @@ static int __init eth_do_config(struct usb_configuration *c)
 	/* FIXME alloc iConfiguration string, set it in c->strings */
 
 	if (gadget_is_otg(c->cdev->gadget)) {
+//printk(KERN_ERR "##### %s otg entry\n",__func__);
 		c->descriptors = otg_desc;
 		c->bmAttributes |= USB_CONFIG_ATT_WAKEUP;
 	}
 
-	if (use_eem)
+	if (use_eem){
+//printk(KERN_ERR "##### %s eem entry\n",__func__);
 		return eem_bind_config(c, the_dev);
-	else if (can_support_ecm(c->cdev->gadget))
+	}else if (can_support_ecm(c->cdev->gadget)){
+//printk(KERN_ERR "##### %s ecm entry\n",__func__);
 		return ecm_bind_config(c, hostaddr, the_dev);
-	else
+	}else{
+//printk(KERN_ERR "##### %s geth entry\n",__func__);
 		return geth_bind_config(c, hostaddr, the_dev);
+	}
 }
 
 static struct usb_configuration eth_config_driver = {
@@ -321,6 +326,8 @@ static int __init eth_bind(struct usb_composite_dev *cdev)
 
 	/* register our configuration(s); RNDIS first, if it's used */
 	if (has_rndis()) {
+
+//printk(KERN_ERR "##### %s has rndis entry\n",__func__);
 		status = usb_add_config(cdev, &rndis_config_driver,
 				rndis_do_config);
 		if (status < 0)
diff --git a/drivers/usb/gadget/f_rndis.c b/drivers/usb/gadget/f_rndis.c
index 36e8c44..92c842a 100644
--- a/drivers/usb/gadget/f_rndis.c
+++ b/drivers/usb/gadget/f_rndis.c
@@ -415,6 +415,7 @@ static void rndis_response_complete(struct usb_ep *ep, struct usb_request *req)
 	 *  - USB_CDC_GET_ENCAPSULATED_RESPONSE (ep0/control)
 	 *  - RNDIS_RESPONSE_AVAILABLE (status/irq)
 	 */
+//printk(KERN_ERR "#### %s Entry\n",__func__);
 	switch (status) {
 	case -ECONNRESET:
 	case -ESHUTDOWN:
@@ -427,6 +428,7 @@ static void rndis_response_complete(struct usb_ep *ep, struct usb_request *req)
 			req->actual, req->length);
 		/* FALLTHROUGH */
 	case 0:
+//printk(KERN_ERR "#### %s Entry Notice No error\n",__func__);
 		if (ep != rndis->notify)
 			break;
 
@@ -664,7 +666,7 @@ rndis_bind(struct usb_configuration *c, struct usb_function *f)
 	struct f_rndis		*rndis = func_to_rndis(f);
 	int			status;
 	struct usb_ep		*ep;
-
+//printk(KERN_ERR "## %s Entry \n",__func__);
 	/* allocate instance-specific interface IDs */
 	status = usb_interface_id(c, f);
 	if (status < 0)
@@ -759,7 +761,8 @@ rndis_bind(struct usb_configuration *c, struct usb_function *f)
 	 * until we're activated via set_alt().
 	 */
 
-	DBG(cdev, "RNDIS: %s speed IN/%s OUT/%s NOTIFY/%s\n",
+//	DBG(cdev, "RNDIS: %s speed IN/%s OUT/%s NOTIFY/%s\n",
+	printk(KERN_ERR "RNDIS: %s speed IN/%s OUT/%s NOTIFY/%s\n",
 			gadget_is_superspeed(c->cdev->gadget) ? "super" :
 			gadget_is_dualspeed(c->cdev->gadget) ? "dual" : "full",
 			rndis->port.in_ep->name, rndis->port.out_ep->name,
diff --git a/drivers/usb/gadget/rndis.c b/drivers/usb/gadget/rndis.c
index 1e4cfb0..d7a3339 100644
--- a/drivers/usb/gadget/rndis.c
+++ b/drivers/usb/gadget/rndis.c
@@ -569,6 +569,7 @@ static int rndis_init_response(int configNr, rndis_init_msg_type *buf)
 	rndis_resp_t *r;
 	struct rndis_params *params = rndis_per_dev_params + configNr;
 
+//printk(KERN_ERR "#### %s Entry \n",__func__);
 	if (!params->dev)
 		return -ENOTSUPP;
 
@@ -605,6 +606,7 @@ static int rndis_query_response(int configNr, rndis_query_msg_type *buf)
 	rndis_resp_t *r;
 	struct rndis_params *params = rndis_per_dev_params + configNr;
 
+//printk(KERN_ERR "#### %s Entry \n",__func__);
 	/* pr_debug("%s: OID = %08X\n", __func__, cpu_to_le32(buf->OID)); */
 	if (!params->dev)
 		return -ENOTSUPP;
@@ -648,6 +650,7 @@ static int rndis_set_response(int configNr, rndis_set_msg_type *buf)
 	rndis_resp_t *r;
 	struct rndis_params *params = rndis_per_dev_params + configNr;
 
+//printk(KERN_ERR "#### %s Entry \n",__func__);
 	r = rndis_add_response(configNr, sizeof(rndis_set_cmplt_type));
 	if (!r)
 		return -ENOMEM;
@@ -686,6 +689,7 @@ static int rndis_reset_response(int configNr, rndis_reset_msg_type *buf)
 	rndis_reset_cmplt_type *resp;
 	rndis_resp_t *r;
 	struct rndis_params *params = rndis_per_dev_params + configNr;
+//printk(KERN_ERR "#### %s Entry \n",__func__);
 
 	r = rndis_add_response(configNr, sizeof(rndis_reset_cmplt_type));
 	if (!r)
@@ -708,7 +712,7 @@ static int rndis_keepalive_response(int configNr,
 	rndis_keepalive_cmplt_type *resp;
 	rndis_resp_t *r;
 	struct rndis_params *params = rndis_per_dev_params + configNr;
-
+//printk(KERN_ERR "#### %s Entry \n",__func__);
 	/* host "should" check only in RNDIS_DATA_INITIALIZED state */
 
 	r = rndis_add_response(configNr, sizeof(rndis_keepalive_cmplt_type));
@@ -778,7 +782,7 @@ void rndis_uninit(int configNr)
 	if (configNr >= RNDIS_MAX_CONFIGS)
 		return;
 	rndis_per_dev_params[configNr].state = RNDIS_UNINITIALIZED;
-
+//printk(KERN_ERR "### %s Entry\n",__func__);
 	/* drain the response queue */
 	while ((buf = rndis_get_next_response(configNr, &length)))
 		rndis_free_response(configNr, buf);
@@ -797,16 +801,20 @@ int rndis_msg_parser(u8 configNr, u8 *buf)
 	u32 MsgType, MsgLength;
 	__le32 *tmp;
 	struct rndis_params *params;
+//printk(KERN_ERR "#### %s Entry \n",__FUNCTION__);
+	if (!buf){
 
-	if (!buf)
+//printk(KERN_ERR "#### %s ENOMEM \n",__FUNCTION__);
 		return -ENOMEM;
-
+}
 	tmp = (__le32 *)buf;
 	MsgType   = get_unaligned_le32(tmp++);
 	MsgLength = get_unaligned_le32(tmp++);
 
-	if (configNr >= RNDIS_MAX_CONFIGS)
+	if (configNr >= RNDIS_MAX_CONFIGS){
+//printk(KERN_ERR "#### %s configNr %x\n",__func__,configNr);
 		return -ENOTSUPP;
+}
 	params = &rndis_per_dev_params[configNr];
 
 	/* NOTE: RNDIS is *EXTREMELY* chatty ... Windows constantly polls for
diff --git a/drivers/usb/gadget/u_ether.c b/drivers/usb/gadget/u_ether.c
index 4b76124..e09e0a8 100644
--- a/drivers/usb/gadget/u_ether.c
+++ b/drivers/usb/gadget/u_ether.c
@@ -197,7 +197,7 @@ rx_submit(struct eth_dev *dev, struct usb_request *req, gfp_t gfp_flags)
 	size_t		size = 0;
 	struct usb_ep	*out;
 	unsigned long	flags;
-
+//printk(KERN_ERR "$ %s Entry RX\n",__func__);
 	spin_lock_irqsave(&dev->lock, flags);
 	if (dev->port_usb)
 		out = dev->port_usb->out_ep;
@@ -205,6 +205,7 @@ rx_submit(struct eth_dev *dev, struct usb_request *req, gfp_t gfp_flags)
 		out = NULL;
 	spin_unlock_irqrestore(&dev->lock, flags);
 
+//printk(KERN_ERR "$ %s Start RX\n",__func__);
 	if (!out)
 		return -ENOTCONN;
 
@@ -254,9 +255,11 @@ enomem:
 		DBG(dev, "rx submit --> %d\n", retval);
 		if (skb)
 			dev_kfree_skb_any(skb);
+//printk(KERN_ERR "$ %s retval spinlock\n",__func__);
 		spin_lock_irqsave(&dev->req_lock, flags);
 		list_add(&req->list, &dev->rx_reqs);
 		spin_unlock_irqrestore(&dev->req_lock, flags);
+//printk(KERN_ERR "$ %s retval spinlock free\n",__func__);
 	}
 	return retval;
 }
@@ -267,6 +270,7 @@ static void rx_complete(struct usb_ep *ep, struct usb_request *req)
 	struct eth_dev	*dev = ep->driver_data;
 	int		status = req->status;
 
+//printk(KERN_ERR "$ %s Entry RX COMP\n",__func__);
 	switch (status) {
 
 	/* normal completion */
@@ -276,6 +280,7 @@ static void rx_complete(struct usb_ep *ep, struct usb_request *req)
 		if (dev->unwrap) {
 			unsigned long	flags;
 
+//printk(KERN_ERR "$ %s spinlock\n",__func__);
 			spin_lock_irqsave(&dev->lock, flags);
 			if (dev->port_usb) {
 				status = dev->unwrap(dev->port_usb,
@@ -286,6 +291,7 @@ static void rx_complete(struct usb_ep *ep, struct usb_request *req)
 				status = -ENOTCONN;
 			}
 			spin_unlock_irqrestore(&dev->lock, flags);
+//printk(KERN_ERR "$ %s spinlock free\n",__func__);
 		} else {
 			skb_queue_tail(&dev->rx_frames, skb);
 		}
@@ -344,9 +350,11 @@ quiesce:
 		dev_kfree_skb_any(skb);
 	if (!netif_running(dev->net)) {
 clean:
+//printk(KERN_ERR "$ %s clean spinlock\n",__func__);
 		spin_lock(&dev->req_lock);
 		list_add(&req->list, &dev->rx_reqs);
 		spin_unlock(&dev->req_lock);
+//printk(KERN_ERR "$ %s clean spinlock free\n",__func__);
 		req = NULL;
 	}
 	if (req)
@@ -395,19 +403,30 @@ extra:
 static int alloc_requests(struct eth_dev *dev, struct gether *link, unsigned n)
 {
 	int	status;
-
-	spin_lock(&dev->req_lock);
+	unsigned long	flags;	/* yamano */
+//	spin_lock(&dev->req_lock);
+	spin_lock_irqsave(&dev->req_lock,flags);
+#if 1 /* yamano */
+	status = prealloc(&dev->rx_reqs, link->out_ep, n);
+	if (status < 0)
+		goto fail;
+	status = prealloc(&dev->tx_reqs, link->in_ep, n);
+	if (status < 0)
+		goto fail;
+#else
 	status = prealloc(&dev->tx_reqs, link->in_ep, n);
 	if (status < 0)
 		goto fail;
 	status = prealloc(&dev->rx_reqs, link->out_ep, n);
 	if (status < 0)
 		goto fail;
+#endif
 	goto done;
 fail:
 	DBG(dev, "can't alloc requests\n");
 done:
-	spin_unlock(&dev->req_lock);
+//	spin_unlock(&dev->req_lock);
+	spin_unlock_irqrestore(&dev->req_lock, flags);
 	return status;
 }
 
@@ -416,6 +435,7 @@ static void rx_fill(struct eth_dev *dev, gfp_t gfp_flags)
 	struct usb_request	*req;
 	unsigned long		flags;
 
+//printk(KERN_ERR "$ %s Entry\n",__func__);
 	/* fill unused rxq slots with some skb */
 	spin_lock_irqsave(&dev->req_lock, flags);
 	while (!list_empty(&dev->rx_reqs)) {
@@ -438,6 +458,7 @@ static void eth_work(struct work_struct *work)
 {
 	struct eth_dev	*dev = container_of(work, struct eth_dev, work);
 
+//printk(KERN_ERR "$ %s Entry\n",__func__);
 	if (test_and_clear_bit(WORK_RX_MEMORY, &dev->todo)) {
 		if (netif_running(dev->net))
 			rx_fill(dev, GFP_KERNEL);
@@ -451,7 +472,9 @@ static void tx_complete(struct usb_ep *ep, struct usb_request *req)
 {
 	struct sk_buff	*skb = req->context;
 	struct eth_dev	*dev = ep->driver_data;
+	unsigned long	flags;	/* yamano */
 
+//printk(KERN_ERR "$ %s Entry\n",__func__);
 	switch (req->status) {
 	default:
 		dev->net->stats.tx_errors++;
@@ -466,8 +489,10 @@ static void tx_complete(struct usb_ep *ep, struct usb_request *req)
 	dev->net->stats.tx_packets++;
 
 	spin_lock(&dev->req_lock);
+//	spin_lock_irqsave(&dev->req_lock,flags);
 	list_add(&req->list, &dev->tx_reqs);
-	spin_unlock(&dev->req_lock);
+//	spin_unlock(&dev->req_lock);
+	spin_unlock_irqrestore(&dev->req_lock,flags);
 	dev_kfree_skb_any(skb);
 
 	atomic_dec(&dev->tx_qlen);
@@ -491,6 +516,7 @@ static netdev_tx_t eth_start_xmit(struct sk_buff *skb,
 	struct usb_ep		*in;
 	u16			cdc_filter;
 
+//printk(KERN_ERR "$ %s Entry\n",__func__);
 	spin_lock_irqsave(&dev->lock, flags);
 	if (dev->port_usb) {
 		in = dev->port_usb->in_ep;
@@ -501,6 +527,7 @@ static netdev_tx_t eth_start_xmit(struct sk_buff *skb,
 	}
 	spin_unlock_irqrestore(&dev->lock, flags);
 
+//printk(KERN_ERR "$ %s Start\n",__func__);
 	if (!in) {
 		dev_kfree_skb_any(skb);
 		return NETDEV_TX_OK;
@@ -528,6 +555,7 @@ static netdev_tx_t eth_start_xmit(struct sk_buff *skb,
 		/* ignores USB_CDC_PACKET_TYPE_DIRECTED */
 	}
 
+//printk(KERN_ERR "$ %s take spinlock\n",__func__);
 	spin_lock_irqsave(&dev->req_lock, flags);
 	/*
 	 * this freelist can be empty if an interrupt triggered disconnect()
@@ -535,6 +563,8 @@ static netdev_tx_t eth_start_xmit(struct sk_buff *skb,
 	 * network stack decided to xmit but before we got the spinlock.
 	 */
 	if (list_empty(&dev->tx_reqs)) {
+//printk(KERN_ERR "$ %s give spinlock TX Busy\n",__func__);
+
 		spin_unlock_irqrestore(&dev->req_lock, flags);
 		return NETDEV_TX_BUSY;
 	}
@@ -546,6 +576,7 @@ static netdev_tx_t eth_start_xmit(struct sk_buff *skb,
 	if (list_empty(&dev->tx_reqs))
 		netif_stop_queue(net);
 	spin_unlock_irqrestore(&dev->req_lock, flags);
+//printk(KERN_ERR "$ %s free spinlock\n",__func__);
 
 	/* no buffer copies needed, unless the network stack did it
 	 * or the hardware can't use skb buffers.
@@ -554,6 +585,7 @@ static netdev_tx_t eth_start_xmit(struct sk_buff *skb,
 	if (dev->wrap) {
 		unsigned long	flags;
 
+//printk(KERN_ERR "$ %s wrap spinlock\n",__func__);
 		spin_lock_irqsave(&dev->lock, flags);
 		if (dev->port_usb)
 			skb = dev->wrap(dev->port_usb, skb);
@@ -561,6 +593,7 @@ static netdev_tx_t eth_start_xmit(struct sk_buff *skb,
 		if (!skb)
 			goto drop;
 
+//printk(KERN_ERR "$ %s wrap free spinlock\n",__func__);
 		length = skb->len;
 	}
 	req->buf = skb->data;
@@ -591,6 +624,7 @@ static netdev_tx_t eth_start_xmit(struct sk_buff *skb,
 			? ((atomic_read(&dev->tx_qlen) % qmult) != 0)
 			: 0;
 
+//printk(KERN_ERR "$ %s no_interrupt %x \n",__func__,req->no_interrupt);
 	retval = usb_ep_queue(in, req, GFP_ATOMIC);
 	switch (retval) {
 	default:
-- 
1.7.1

