From 2952a036e6076805cec6b8ff59ce5b38dff783cf Mon Sep 17 00:00:00 2001
From: jthomas <jacob.thomas@windriver.com>
Date: Wed, 11 May 2016 11:33:19 +0900
Subject: [PATCH 020/170] 0019-merge-sdhc-driver


diff --git a/drivers/mmc/host/Kconfig b/drivers/mmc/host/Kconfig
index f4c52d0..2f93549 100644
--- a/drivers/mmc/host/Kconfig
+++ b/drivers/mmc/host/Kconfig
@@ -166,6 +166,17 @@ config MMC_SDHCI_CNS3XXX
 
 	  If unsure, say N.
 
+config MMC_SDHCI_LM2
+	tristate "SDHCI support on the LM2 SoC"
+	depends on ARCH_LM2
+	depends on MMC_SDHCI_PLTFM
+	help
+	  This selects the SDHCI support for CNS3xxx System-on-Chip devices.
+
+	  If you have a controller with this interface, say Y or M here.
+
+	  If unsure, say N.
+
 config MMC_SDHCI_ESDHC_IMX
 	tristate "SDHCI support for the Freescale eSDHC/uSDHC i.MX controller"
 	depends on ARCH_MXC
diff --git a/drivers/mmc/host/Makefile b/drivers/mmc/host/Makefile
index 7671bf9..c189ae8 100644
--- a/drivers/mmc/host/Makefile
+++ b/drivers/mmc/host/Makefile
@@ -53,6 +53,7 @@ obj-$(CONFIG_MMC_REALTEK_PCI)	+= rtsx_pci_sdmmc.o
 
 obj-$(CONFIG_MMC_SDHCI_PLTFM)		+= sdhci-pltfm.o
 obj-$(CONFIG_MMC_SDHCI_CNS3XXX)		+= sdhci-cns3xxx.o
+obj-$(CONFIG_MMC_SDHCI_LM2)		+= sdhci-lm2.o
 obj-$(CONFIG_MMC_SDHCI_ESDHC_IMX)	+= sdhci-esdhc-imx.o
 obj-$(CONFIG_MMC_SDHCI_DOVE)		+= sdhci-dove.o
 obj-$(CONFIG_MMC_SDHCI_TEGRA)		+= sdhci-tegra.o
diff --git a/drivers/mmc/host/sdhci-lm2.c b/drivers/mmc/host/sdhci-lm2.c
new file mode 100644
index 0000000..2e0070c
--- /dev/null
+++ b/drivers/mmc/host/sdhci-lm2.c
@@ -0,0 +1,108 @@
+/*
+ * SDHCI support for FujiXerox LM2 Waikiki Motherboard Support
+ * Copyright (c) 2013-2014 Wind River Systems, Inc
+ * Koki Yamano < koki.yamano@windriver.com >
+ * This file is released under the GPLv2
+ *
+ */
+
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/mmc/host.h>
+#include <linux/module.h>
+#include "sdhci-pltfm.h"
+
+static unsigned int sdhci_lm2_get_max_clk(struct sdhci_host *host)
+{
+	return 89000000;	/* SDMCLK=89MHz */
+}
+
+static void sdhci_lm2_set_clock(struct sdhci_host *host, unsigned int clock)
+{
+	struct device *dev = mmc_dev(host->mmc);
+	int div = 1;
+	u16 clk=0;
+	unsigned long timeout;
+	unsigned int get_clk;
+
+	if (clock == host->clock)
+		return;
+
+	sdhci_writew(host, 0, SDHCI_CLOCK_CONTROL);
+
+	if (clock == 0)
+		return;
+
+	host->clock = clock;
+
+#if 0
+	if (host->max_clk / div > clock) {
+		div = 0x01;
+	} else {
+		div = 0x00;
+	}
+	dev_dbg(dev, "desired SD clock: %d, actual: %d\n",clock, host->max_clk / div);
+	
+	clk  = div<<SDHCI_DIVIDER_SHIFT;	/* SDCLKFS=0x001 89MHz/2=45MHz*/
+#endif
+	clk  = SDHCI_PROG_CLOCK_MODE;
+	clk |= SDHCI_CLOCK_INT_EN;		/* 0x01 */
+	sdhci_writew(host, clk, SDHCI_CLOCK_CONTROL);
+
+	timeout = 20;
+	while (!((clk = sdhci_readw(host, SDHCI_CLOCK_CONTROL))
+			& SDHCI_CLOCK_INT_STABLE)) {
+		if (timeout == 0) {
+			dev_warn(dev, "clock is unstable");
+			break;
+		}
+		timeout--;
+		mdelay(1);
+	}
+
+	clk |= SDHCI_CLOCK_CARD_EN;	/* 0x04 */
+	sdhci_writew(host, clk, SDHCI_CLOCK_CONTROL);
+}
+
+static const struct sdhci_ops sdhci_lm2_ops = {
+	.get_max_clock	= sdhci_lm2_get_max_clk,
+	.set_clock	= sdhci_lm2_set_clock,
+};
+
+static const struct sdhci_pltfm_data sdhci_lm2_pdata = {
+	.ops = &sdhci_lm2_ops,
+	.quirks = SDHCI_QUIRK_CAP_CLOCK_BASE_BROKEN |
+		  SDHCI_QUIRK_NONSTANDARD_CLOCK,
+//	.quirks = SDHCI_QUIRK_BROKEN_DMA |
+//		  SDHCI_QUIRK_DATA_TIMEOUT_USES_SDCLK |
+//		  SDHCI_QUIRK_INVERTED_WRITE_PROTECT |
+//		  SDHCI_QUIRK_CAP_CLOCK_BASE_BROKEN,
+//		  SDHCI_QUIRK_BROKEN_TIMEOUT_VAL |
+//		  SDHCI_QUIRK_NONSTANDARD_CLOCK,
+};
+
+static int sdhci_lm2_probe(struct platform_device *pdev)
+{
+	return sdhci_pltfm_register(pdev, &sdhci_lm2_pdata);
+}
+
+static int sdhci_lm2_remove(struct platform_device *pdev)
+{
+	return sdhci_pltfm_unregister(pdev);
+}
+
+static struct platform_driver sdhci_lm2_driver = {
+	.driver		= {
+		.name	= "sdhci-lm2",
+		.owner	= THIS_MODULE,
+		.pm	= SDHCI_PLTFM_PMOPS,
+	},
+	.probe		= sdhci_lm2_probe,
+	.remove		= sdhci_lm2_remove,
+};
+
+module_platform_driver(sdhci_lm2_driver);
+
+MODULE_DESCRIPTION("SDHCI driver for LM2");
+MODULE_AUTHOR("Koki Yamano < koki.yamano@windriver.com >");
+MODULE_LICENSE("GPLv2");
-- 
1.7.1

