#!/bin/bash

#silence git yet report errors
quiet_git() {
    stdout=../tmp098.txt 
    stderr=../tmp099.txt

    #echo GITARGS "$@"

    if ! git "$@" </dev/null >$stdout 2>$stderr; then
    	cat $stdout|grep "Applying:"
        cat $stderr >&2
    	if [ -n "`grep -i conflict $stdout`" ]; then
    		grep -i conflict $stdout >../tmp090.txt
        	while read -r line
		do
  			echo $line;
		done <"../tmp090.txt";
		rm -f ../tmp090.txt
    	else
		cat $stdout
	fi
        rm -f $stdout $stderr
#       exit 1
	return 1
    fi
    rm -f $stdout $stderr
    return 0
}


patch_12base()
{
 patchname=$1
 count=$2
 #checkoutbranch=$2
 #newbranchname=$3

 #quiet_git checkout $checkoutbranch
 quiet_git checkout br12
 patch -p1 --dry-run --silent < ../../../reference/patches/set1/$patchname.patch
 if [ $? -ne 0 ];
 then
	echo Patch failed on br12. Aborting..
 	exit 1
 else
	patch -p1 < ../../../reference/patches/set1/$patchname.patch >/dev/null
 fi
 quiet_git add -A
 echo -ne "                                                                                                \r"
 echo -ne "[$count] Patching $patchname...\r"
 quiet_git commit -m "$patchname"
 #quiet_git branch $newbranchname
}

merge_to_27base()
{
#arguments - patchname, icheckoutbranch, mergebranch, newbranchname, resolvedir
patchname=$1
checkoutbranch=$2
mergebranch=$3
newbranchname=$4
resolvedir=$5

echo "Merging $patchname [$mergebranch --> $checkoutbranch ==> $newbranchname]"

#before merge, check if a conflicts directory exists fo this $mergebranch
#if one exists, create a temp branch, copy resolved files and do git add before merge
if [ -d "../../resolved/$mergebranch" ]; then 

	if [ ! -f ../../resolved/$mergebranch/resolve.txt ]; then
		echo You must create a resolve.txt for merge resolutions.
		echo Will not proceed without resolve.txt
		exit 1
	fi
	echo Copying files from resolve directory to $mergebranch ..
	quiet_git checkout $mergebranch
	quiet_git branch 12tmpb
	quiet_git checkout 12tmpb
	
	cp -R ../../resolved/$mergebranch/* .
	rm ./resolve.txt
	quiet_git add -A
 	quiet_git commit -m "$patchname with resolve"

	echo Copying files from resolve directory $checkoutbranch ..
	quiet_git checkout $checkoutbranch
	quiet_git branch 27tmpb
	quiet_git checkout 27tmpb

	cp -R ../../resolved/$mergebranch/* .
	rm ./resolve.txt
	quiet_git add -A
 	quiet_git commit -m "$patchname with resolve"

	quiet_git merge 12tmpb
	if [ $? -ne 0 ];
	then
		echo Unexpected error in merging resolved files to tmp branch. exiting..
		exit 1
	fi
	echo Auto-merging with resolved...
	quiet_git checkout $checkoutbranch
	quiet_git merge 27tmpb
	if [ $? -ne 0 ];
	then
		echo Unexpected error in merging resolved files to br27 branch. exiting..
		exit 1
	else
		quiet_git branch $newbranchname

		git branch -d 12tmpb
		git branch -d 27tmpb
		echo Rebasing $patchname complete.
		echo 
	fi
else
	echo Auto-merging...
	quiet_git checkout $checkoutbranch
	quiet_git merge $mergebranch 

	if [ $? -ne 0 ];
	then
		echo merge failed...
		git mergetool
		echo Cannot commit resolutions from merge tool.
		echo Add resolved files to respective resolved directory and re-run rebase_am.
		exit 1
	else
		quiet_git branch $newbranchname

		echo Rebasing $patchname complete.
		echo 
	fi
fi

}

echo Removing current repo..
rm -rf staging_git
mkdir staging_git
cd staging_git

echo Creating 12_base..
cp -R ../../../reference/src/rcpl12linux/linux/* .
cp -R ../../../reference/src/rcpl12linux/delta/* .
git init
git config --global merge.tool meld
quiet_git add -A
quiet_git commit -m "rcpl12 base"
#quiet_git branch br_base
quiet_git branch br12
quiet_git branch br27

quiet_git checkout br27
cp -R ../../../reference/src/rcpl27linux/linux/* .
cp -R ../../../reference/src/rcpl27linux/delta/* .
quiet_git add -A
quiet_git commit -m "rcpl27 base"
quiet_git branch br27_1
echo RCPL0027 branch set up. 

# for all patches in list
# apply to br12 branch one by one.
count=0
while IFS='' read -r line || [[ -n "$line" ]]; do
	patch_12base $line $count
	count=$((count+1))
done < "./../patchnames_to_rebase.txt"
echo 

# rebase algo
# do
#{
#    	status = try rebase
#	if status = error
#		try resolve conflict
#		status = git rebase continue
#	fi
#}while (status != 0 )	

# rebase br12 to br27_1
echo Rebasing..
quiet_git checkout br12
quiet_git rebase br27_1
rebase_status=$?
while
	if [ $rebase_status -ne 0 ]; then
		#there is a conflict - try resolving
		lastone=`cat .git/rebase-apply/final-commit`
		echo Rebase failed at $lastone 
		echo Attempting to resolve..

		if [ -d "../../resolved/$lastone" ]; then 
			if [ ! -f ../../resolved/$lastone/resolve.txt ]; then
				echo You must create a resolve.txt for merge resolutions.
				echo Will not proceed without resolve.txt
				exit 1
			fi
			cp -R ../../resolved/$lastone/* .
			rm ./resolve.txt
			quiet_git add -A
        		quiet_git rebase --continue
			rebase_status=$?
		else
			rebase_status=0
			echo Could not find resolve directory "../../resolved/$lastone"
			echo Starting mergetool.
			git mergetool
			echo Cannot commit resolutions from merge tool.
			echo Add resolved files to resolved directory and re-run rebase_am.
			exit 1
		fi
	fi
	[ "$rebase_status" -ne 0 ]
do :; done

#generate patches - reuse gen23p.sh
#quiet_git format-patch -p -$count 

echo $count Done.
exit 1

#quiet_git rebase -v br27_1
#quiet_git rebase br27_1
#rebase_status=$?

#if [ $? -ne 0 ]; then
if [ $rebase_status -ne 0 ]; then
	#there is a conflict - try resolving
	lastone=`cat .git/rebase-apply/final-commit`
	echo Rebase failed at $lastone 
	echo Attempting to resolve..
	#if [ -d "../../resolved/$lastone" ]; then 
		#cp -R ../../resolved/$lastone/* .
		#quiet_git add -A
        	#quiet_git rebase --continue
		#rebase_status=$?
	#else
		#rebase_status=0
	#	echo Could not find resolve directory. Add resolved files to resolved directory and re-run rebase_am.
	#	exit 1
	#fi
	
fi
exit 1

#
# for all patches in list ....
# patch_12base()
# merge_to_27base()
#
count=0
while IFS='' read -r line || [[ -n "$line" ]]; do
    	echo "rebasing: $line"
	patch_12base $line br12_$count br12_$((count+1))
	merge_to_27base $line br27_$((count+1)) br12_$((count+1)) br27_$((count+2))
	count=$((count+1))
done < "./../patchnames_to_rebase.txt"

#generate patches - reuse gen23p.sh
echo $count Done.
